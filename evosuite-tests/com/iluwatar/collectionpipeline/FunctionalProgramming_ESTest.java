/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 03:25:42 GMT 2021
 */

package com.iluwatar.collectionpipeline;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.collectionpipeline.Car;
import com.iluwatar.collectionpipeline.Category;
import com.iluwatar.collectionpipeline.FunctionalProgramming;
import com.iluwatar.collectionpipeline.Person;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionalProgramming_ESTest extends FunctionalProgramming_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Category category0 = Category.SEDAN;
      Car car0 = new Car("", "com.iluwatar.collectionpipeline.FunctionalProgramming", 1095, category0);
      List<Car> list0 = List.of(car0, car0, car0, car0, car0, car0, car0);
      Person person0 = new Person(list0);
      List<Person> list1 = List.of(person0, person0);
      List<Car> list2 = FunctionalProgramming.getSedanCarsOwnedSortedByDate(list1);
      assertFalse(list2.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Category category0 = Category.SEDAN;
      Car car0 = new Car("", "com.iluwatar.collectionpipeline.FunctionalProgramming", 1095, category0);
      List<Car> list0 = List.of(car0, car0, car0, car0, car0, car0, car0);
      List<String> list1 = FunctionalProgramming.getModelsAfter2000(list0);
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Category category0 = Category.SEDAN;
      Car car0 = new Car("", "", 2061, category0);
      List<Car> list0 = List.of(car0, car0, car0, car0);
      List<String> list1 = FunctionalProgramming.getModelsAfter2000(list0);
      assertTrue(list1.contains(""));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Category category0 = Category.SEDAN;
      Car car0 = new Car("", "com.iluwatar.collectionpipeline.FunctionalProgramming", 1095, category0);
      List<Car> list0 = List.of(car0, car0, car0, car0, car0, car0, car0);
      Map<Category, List<Car>> map0 = FunctionalProgramming.getGroupingOfCarsByCategory(list0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Car> linkedList0 = new LinkedList<Car>();
      Category category0 = Category.JEEP;
      Car car0 = new Car("$8?", "", 0, category0);
      linkedList0.add(car0);
      List<Car> list0 = linkedList0.subList(0, 0);
      linkedList0.pollLast();
      Person person0 = new Person(list0);
      List<Person> list1 = List.of(person0, person0, person0, person0);
      // Undeclared exception!
      try { 
        FunctionalProgramming.getSedanCarsOwnedSortedByDate(list1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        FunctionalProgramming.getSedanCarsOwnedSortedByDate((List<Person>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.List.stream()\" because \"persons\" is null
         //
         verifyException("com.iluwatar.collectionpipeline.FunctionalProgramming", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Car> linkedList0 = new LinkedList<Car>();
      Category category0 = Category.JEEP;
      Car car0 = new Car("", "", 0, category0);
      linkedList0.add(car0);
      List<Car> list0 = linkedList0.subList(0, 0);
      linkedList0.pollLast();
      // Undeclared exception!
      try { 
        FunctionalProgramming.getModelsAfter2000(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FunctionalProgramming.getGroupingOfCarsByCategory((List<Car>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.List.stream()\" because \"cars\" is null
         //
         verifyException("com.iluwatar.collectionpipeline.FunctionalProgramming", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Person> linkedList0 = new LinkedList<Person>();
      List<Car> list0 = FunctionalProgramming.getSedanCarsOwnedSortedByDate(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Car> linkedList0 = new LinkedList<Car>();
      Map<Category, List<Car>> map0 = FunctionalProgramming.getGroupingOfCarsByCategory(linkedList0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        FunctionalProgramming.getModelsAfter2000((List<Car>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.List.stream()\" because \"cars\" is null
         //
         verifyException("com.iluwatar.collectionpipeline.FunctionalProgramming", e);
      }
  }
}
