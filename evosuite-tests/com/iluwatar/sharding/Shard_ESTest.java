/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 12:48:24 GMT 2021
 */

package com.iluwatar.sharding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.sharding.Data;
import com.iluwatar.sharding.Shard;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Shard_ESTest extends Shard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Shard shard0 = new Shard(0);
      int int0 = shard0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Shard shard0 = new Shard(1420);
      int int0 = shard0.getId();
      assertEquals(1420, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Shard shard0 = new Shard(0);
      Data.DataType data_DataType0 = Data.DataType.TYPE_2;
      Data data0 = new Data(0, "", data_DataType0);
      shard0.storeData(data0);
      Data data1 = shard0.getDataById(0);
      assertEquals(0, shard0.getId());
      assertNotNull(data1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Shard shard0 = new Shard((-1293));
      Data.DataType data_DataType0 = Data.DataType.TYPE_2;
      Data data0 = new Data((-1293), "", data_DataType0);
      data0.setKey(2644);
      shard0.storeData(data0);
      Data data1 = shard0.getDataById(2644);
      assertNotNull(data1);
      assertEquals((-1293), shard0.getId());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Shard shard0 = new Shard((-1));
      Data.DataType data_DataType0 = Data.DataType.TYPE_3;
      Data data0 = new Data((-1), "", data_DataType0);
      shard0.storeData(data0);
      Data data1 = shard0.getDataById((-1));
      assertNotNull(data1);
      assertEquals((-1), shard0.getId());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Shard shard0 = new Shard(0);
      // Undeclared exception!
      try { 
        shard0.storeData((Data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.sharding.Data.getKey()\" because \"data\" is null
         //
         verifyException("com.iluwatar.sharding.Shard", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Shard shard0 = new Shard((-1293));
      shard0.getDataById(2644);
      assertEquals((-1293), shard0.getId());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Shard shard0 = new Shard((-1293));
      int int0 = shard0.getId();
      assertEquals((-1293), int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Shard shard0 = new Shard((-2535));
      shard0.clearData();
      assertEquals((-2535), shard0.getId());
  }
}
