/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 03:37:45 GMT 2021
 */

package com.iluwatar.commander;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.commander.Commander;
import com.iluwatar.commander.Order;
import com.iluwatar.commander.employeehandle.EmployeeDatabase;
import com.iluwatar.commander.employeehandle.EmployeeHandle;
import com.iluwatar.commander.exceptions.ItemUnavailableException;
import com.iluwatar.commander.messagingservice.MessagingDatabase;
import com.iluwatar.commander.messagingservice.MessagingService;
import com.iluwatar.commander.paymentservice.PaymentDatabase;
import com.iluwatar.commander.paymentservice.PaymentService;
import com.iluwatar.commander.queue.QueueDatabase;
import com.iluwatar.commander.shippingservice.ShippingDatabase;
import com.iluwatar.commander.shippingservice.ShippingService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Commander_ESTest extends Commander_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EmployeeDatabase employeeDatabase0 = new EmployeeDatabase();
      Exception[] exceptionArray0 = new Exception[4];
      MockException mockException0 = new MockException("Y`_I");
      exceptionArray0[0] = (Exception) mockException0;
      exceptionArray0[1] = (Exception) mockException0;
      ItemUnavailableException itemUnavailableException0 = new ItemUnavailableException();
      exceptionArray0[2] = (Exception) itemUnavailableException0;
      exceptionArray0[3] = (Exception) itemUnavailableException0;
      EmployeeHandle employeeHandle0 = new EmployeeHandle(employeeDatabase0, exceptionArray0);
      PaymentDatabase paymentDatabase0 = new PaymentDatabase();
      PaymentService paymentService0 = new PaymentService(paymentDatabase0, exceptionArray0);
      ShippingDatabase shippingDatabase0 = new ShippingDatabase();
      ShippingService shippingService0 = new ShippingService(shippingDatabase0, exceptionArray0);
      MessagingDatabase messagingDatabase0 = new MessagingDatabase();
      MessagingService messagingService0 = new MessagingService(messagingDatabase0, exceptionArray0);
      QueueDatabase queueDatabase0 = new QueueDatabase(exceptionArray0);
      Commander commander0 = new Commander(employeeHandle0, paymentService0, shippingService0, messagingService0, queueDatabase0, (-1245), 0L, (-1245), (-4011L), (-1245), (-1245), 1105L);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PaymentDatabase paymentDatabase0 = new PaymentDatabase();
      Exception[] exceptionArray0 = new Exception[0];
      PaymentService paymentService0 = new PaymentService(paymentDatabase0, exceptionArray0);
      ShippingDatabase shippingDatabase0 = new ShippingDatabase();
      ShippingService shippingService0 = new ShippingService(shippingDatabase0, exceptionArray0);
      QueueDatabase queueDatabase0 = new QueueDatabase(exceptionArray0);
      Commander commander0 = new Commander((EmployeeHandle) null, paymentService0, shippingService0, (MessagingService) null, queueDatabase0, 7, 7, 7, 7, 7, 7, 7);
      try { 
        commander0.placeOrder((Order) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot read field \"id\" because \"order\" is null
         //
         verifyException("com.iluwatar.commander.Commander", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PaymentDatabase paymentDatabase0 = new PaymentDatabase();
      Exception[] exceptionArray0 = new Exception[0];
      PaymentService paymentService0 = new PaymentService(paymentDatabase0, exceptionArray0);
      ShippingDatabase shippingDatabase0 = new ShippingDatabase();
      ShippingService shippingService0 = new ShippingService(shippingDatabase0, exceptionArray0);
      MessagingDatabase messagingDatabase0 = new MessagingDatabase();
      MessagingService messagingService0 = new MessagingService(messagingDatabase0, exceptionArray0);
      QueueDatabase queueDatabase0 = new QueueDatabase(exceptionArray0);
      Commander commander0 = new Commander((EmployeeHandle) null, paymentService0, shippingService0, messagingService0, queueDatabase0, 0, 0, 0L, 0L, 555L, (-547L), 1L);
  }
}
