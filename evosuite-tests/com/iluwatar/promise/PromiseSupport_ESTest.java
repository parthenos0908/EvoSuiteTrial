/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 11:07:04 GMT 2021
 */

package com.iluwatar.promise;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.promise.PromiseSupport;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PromiseSupport_ESTest extends PromiseSupport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PromiseSupport<Integer> promiseSupport0 = new PromiseSupport<Integer>();
      promiseSupport0.fulfill((Integer) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Integer integer0 = promiseSupport0.get(0L, timeUnit0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PromiseSupport<String> promiseSupport0 = new PromiseSupport<String>();
      promiseSupport0.fulfillExceptionally((Exception) null);
      try { 
        promiseSupport0.get((-3728L), timeUnit0);
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.promise.PromiseSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PromiseSupport<String> promiseSupport0 = new PromiseSupport<String>();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        promiseSupport0.get((-1L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PromiseSupport<Object> promiseSupport0 = new PromiseSupport<Object>();
      promiseSupport0.fulfill("34Ck[FhoC0h}20u*");
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Object object0 = promiseSupport0.get((-3728L), timeUnit0);
      assertEquals("34Ck[FhoC0h}20u*", object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PromiseSupport<Integer> promiseSupport0 = new PromiseSupport<Integer>();
      MockException mockException0 = new MockException();
      promiseSupport0.fulfillExceptionally(mockException0);
      try { 
        promiseSupport0.get();
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.iluwatar.promise.PromiseSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PromiseSupport<Integer> promiseSupport0 = new PromiseSupport<Integer>();
      assertFalse(promiseSupport0.isDone());
      
      MockException mockException0 = new MockException();
      promiseSupport0.fulfillExceptionally(mockException0);
      boolean boolean0 = promiseSupport0.isDone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PromiseSupport<String> promiseSupport0 = new PromiseSupport<String>();
      boolean boolean0 = promiseSupport0.isDone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PromiseSupport<PromiseSupport<Object>> promiseSupport0 = new PromiseSupport<PromiseSupport<Object>>();
      boolean boolean0 = promiseSupport0.isCancelled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PromiseSupport<Object> promiseSupport0 = new PromiseSupport<Object>();
      promiseSupport0.fulfill("34Ck[FhoC0h}20u*");
      Object object0 = promiseSupport0.get();
      assertEquals("34Ck[FhoC0h}20u*", object0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PromiseSupport<Object> promiseSupport0 = new PromiseSupport<Object>();
      boolean boolean0 = promiseSupport0.cancel(false);
      assertFalse(boolean0);
  }
}
