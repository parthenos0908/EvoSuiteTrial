/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 11:08:12 GMT 2021
 */

package com.iluwatar.promise;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.promise.Utility;
import java.io.UncheckedIOException;
import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Character, Long> hashMap0 = new HashMap<Character, Long>();
      Character character0 = Character.valueOf('>');
      Long long0 = new Long((-1L));
      hashMap0.put(character0, long0);
      Character character1 = Utility.lowestFrequencyChar(hashMap0);
      assertEquals('>', (char)character1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Character, Long> hashMap0 = new HashMap<Character, Long>();
      Character character0 = Character.valueOf('1');
      Long long0 = new Long(0L);
      hashMap0.put(character0, long0);
      Character character1 = Utility.lowestFrequencyChar(hashMap0);
      assertEquals('1', (char)character1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Long long0 = new Long(0L);
      HashMap<Character, Long> hashMap0 = new HashMap<Character, Long>();
      Character character0 = Character.valueOf('G');
      hashMap0.put(character0, long0);
      Character character1 = Utility.lowestFrequencyChar(hashMap0);
      assertEquals('G', (char)character1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      Integer integer0 = Utility.countLines("\n");
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      Map<Character, Long> map0 = Utility.characterFrequency("\n");
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.iluwatar.promise.Utility");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "~dqz> k");
      Map<Character, Long> map0 = Utility.characterFrequency("com.iluwatar.promise.Utility");
      assertEquals(7, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.lowestFrequencyChar((Map<Character, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.Map.entrySet()\" because \"charFrequency\" is null
         //
         verifyException("com.iluwatar.promise.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        Utility.downloadFile("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.countLines((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.countLines("\n");
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("java.io.BufferedReader$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.characterFrequency((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      // Undeclared exception!
      try { 
        Utility.characterFrequency("\n");
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("java.io.BufferedReader$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Character, Long> hashMap0 = new HashMap<Character, Long>();
      // Undeclared exception!
      try { 
        Utility.lowestFrequencyChar(hashMap0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         verifyException("java.util.Optional", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Map<Character, Long> map0 = Utility.characterFrequency("com.iluwatar.promise.Utility");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = Utility.countLines("\n");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utility utility0 = new Utility();
  }
}
