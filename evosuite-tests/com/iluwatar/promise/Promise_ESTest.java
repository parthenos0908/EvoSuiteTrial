/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 11:03:42 GMT 2021
 */

package com.iluwatar.promise;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.promise.Promise;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Promise_ESTest extends Promise_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Promise<Object> promise0 = new Promise<Object>();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(977);
      Promise<Object> promise1 = promise0.fulfillInAsync(callable0, scheduledThreadPoolExecutor0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "Interrupted!");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "com.iluwatar.promise.Promise");
      MockThread.getDefaultUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      MockThread mockThread2 = new MockThread(mockThread1, "GE~Um:");
      scheduledThreadPoolExecutor0.execute(mockThread2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Void> promise2 = promise1.thenAccept(consumer0);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      Promise<Object> promise3 = promise0.fulfillInAsync(callable1, scheduledThreadPoolExecutor0);
      promise3.fulfill(mockThread2);
      Promise<String> promise4 = new Promise<String>();
      Function<String, String> function0 = Function.identity();
      Promise<String> promise5 = promise4.thenApply((Function<? super String, String>) function0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<String> promise6 = promise5.onError(consumer1);
      Callable<String> callable2 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable2).call();
      Promise<String> promise7 = promise6.fulfillInAsync(callable2, scheduledThreadPoolExecutor0);
      Callable<Void> callable3 = (Callable<Void>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable3).call();
      Promise<Void> promise8 = promise2.fulfillInAsync(callable3, scheduledThreadPoolExecutor0);
      Callable<Void> callable4 = (Callable<Void>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable4).call();
      promise8.fulfillInAsync(callable4, scheduledThreadPoolExecutor0);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      promise7.thenAccept(consumer2);
      Promise<Integer> promise9 = new Promise<Integer>();
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Integer> promise10 = promise9.onError(consumer3);
      Promise<Integer> promise11 = promise10.thenApply((Function<? super Integer, Integer>) null);
      Callable<Integer> callable5 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable5).call();
      Promise<Integer> promise12 = promise11.fulfillInAsync(callable5, scheduledThreadPoolExecutor0);
      MockException mockException0 = new MockException();
      promise12.fulfillExceptionally(mockException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Promise<Object> promise0 = new Promise<Object>();
      Promise<Delayed> promise1 = new Promise<Delayed>();
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Promise<Delayed> promise2 = promise1.fulfillInAsync(callable0, scheduledThreadPoolExecutor0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      promise1.thenAccept(consumer0);
      MockException mockException0 = new MockException();
      promise1.fulfillExceptionally(mockException0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      scheduledThreadPoolExecutor0.getContinueExistingPeriodicTasksAfterShutdownPolicy();
      Promise<Delayed> promise3 = promise2.onError(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      promise3.thenAccept(consumer2);
      Consumer<Delayed> consumer3 = (Consumer<Delayed>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Void> promise4 = promise3.thenAccept(consumer3);
      Consumer<Void> consumer4 = (Consumer<Void>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      promise4.thenAccept(consumer4);
      promise0.fulfillExceptionally(mockException0);
      Promise<Throwable> promise5 = new Promise<Throwable>();
      Callable<Throwable> callable1 = (Callable<Throwable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      promise5.fulfillInAsync(callable1, scheduledThreadPoolExecutor0);
      MockThrowable mockThrowable0 = new MockThrowable("com.iluwatar.promise.Promise$ConsumeAction", mockException0);
      promise0.fulfill(mockThrowable0);
      Promise<String> promise6 = new Promise<String>();
      promise6.fulfillExceptionally(mockException0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Promise<Integer> promise0 = new Promise<Integer>();
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Promise<Integer> promise1 = promise0.fulfillInAsync(callable0, forkJoinPool0);
      promise1.fulfillInAsync((Callable<Integer>) null, forkJoinPool0);
      promise1.fulfillExceptionally((Exception) null);
      Promise<Object> promise2 = new Promise<Object>();
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      promise2.fulfillInAsync(callable1, forkJoinPool0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Void> promise3 = promise2.thenAccept(consumer0);
      assertNotNull(promise3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Promise<Throwable> promise0 = new Promise<Throwable>();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Throwable> promise1 = promise0.onError(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Void> promise2 = promise0.thenAccept(consumer1);
      MockException mockException0 = new MockException();
      MockException mockException1 = new MockException("", mockException0);
      promise2.fulfillExceptionally(mockException1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      promise0.onError(consumer2);
      MockException mockException2 = new MockException();
      promise1.fulfillExceptionally(mockException2);
      assertFalse(mockException2.equals((Object)mockException1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Promise<Integer> promise0 = new Promise<Integer>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Promise<Object> promise1 = promise0.thenApply((Function<? super Integer, Object>) unaryOperator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Object> promise2 = promise1.onError(consumer0);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Promise<Integer> promise3 = promise0.fulfillInAsync(callable0, forkJoinPool0);
      Integer integer0 = new Integer(0);
      promise3.fulfill(integer0);
      Promise<String> promise4 = new Promise<String>();
      Callable<String> callable1 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      promise4.onError(consumer1);
      Promise<String> promise5 = promise4.fulfillInAsync(callable1, forkJoinPool0);
      Function<String, String> function0 = Function.identity();
      Promise<String> promise6 = promise5.thenApply((Function<? super String, String>) function0);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      function0.andThen((Function<? super String, ?>) unaryOperator0);
      Promise<String> promise7 = promise6.onError(consumer2);
      promise7.fulfillExceptionally((Exception) null);
      Promise<Void> promise8 = new Promise<Void>();
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Void> promise9 = promise8.onError(consumer3);
      Callable<Void> callable2 = (Callable<Void>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable2).call();
      Promise<Void> promise10 = promise9.fulfillInAsync(callable2, forkJoinPool0);
      Consumer<Object> consumer4 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Void> promise11 = promise10.thenAccept(consumer4);
      assertNotSame(promise11, promise9);
      
      Promise<Delayed> promise12 = new Promise<Delayed>();
      promise12.fulfillExceptionally((Exception) null);
      Consumer<Object> consumer5 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      promise2.thenAccept(consumer5);
      Callable<String> callable3 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable3).call();
      promise5.fulfillInAsync(callable3, forkJoinPool0);
      promise4.fulfillInAsync((Callable<String>) null, forkJoinPool0);
      assertNotSame(promise4, promise7);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Promise<Object> promise0 = new Promise<Object>();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(promise0).when(callable0).call();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(977);
      Promise<Object> promise1 = promise0.fulfillInAsync(callable0, scheduledThreadPoolExecutor0);
      MockThread.getDefaultUncaughtExceptionHandler();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Void> promise2 = promise1.thenAccept(consumer0);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn("com.iluwatar.promise.Promise").when(callable1).call();
      promise0.fulfillInAsync(callable1, scheduledThreadPoolExecutor0);
      Promise<String> promise3 = new Promise<String>();
      Function<String, String> function0 = Function.identity();
      Promise<String> promise4 = promise3.thenApply((Function<? super String, String>) function0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<String> promise5 = promise4.onError(consumer1);
      Callable<String> callable2 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn("D_&~.^6CsZ").when(callable2).call();
      Promise<String> promise6 = promise5.fulfillInAsync(callable2, scheduledThreadPoolExecutor0);
      Callable<Void> callable3 = (Callable<Void>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable3).call();
      Promise<Void> promise7 = promise2.fulfillInAsync(callable3, scheduledThreadPoolExecutor0);
      Callable<Void> callable4 = (Callable<Void>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable4).call();
      promise7.fulfillInAsync(callable4, scheduledThreadPoolExecutor0);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      promise6.thenAccept(consumer2);
      Promise<Integer> promise8 = new Promise<Integer>();
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Integer> promise9 = promise8.onError(consumer3);
      Promise<Integer> promise10 = promise9.thenApply((Function<? super Integer, Integer>) null);
      Callable<Integer> callable5 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable5).call();
      promise8.fulfill((Integer) null);
      Promise<Integer> promise11 = promise10.fulfillInAsync(callable5, scheduledThreadPoolExecutor0);
      MockException mockException0 = new MockException();
      promise11.fulfillExceptionally(mockException0);
      assertNotSame(promise11, promise9);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Promise<Void> promise0 = new Promise<Void>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Object> promise1 = new Promise<Object>();
      Function<Object, Object> function0 = Function.identity();
      promise1.thenApply((Function<? super Object, Object>) function0);
      Promise<Object> promise2 = promise1.onError(consumer0);
      promise2.thenApply((Function<? super Object, String>) null);
      Promise<Integer> promise3 = new Promise<Integer>();
      Integer integer0 = new Integer(3124);
      promise3.fulfill(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Promise<Void> promise0 = new Promise<Void>();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      promise0.onError(consumer0);
      Promise<String> promise1 = new Promise<String>();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<String> promise2 = promise1.onError(consumer1);
      promise2.fulfill("");
      assertSame(promise1, promise2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Promise<String> promise0 = new Promise<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Promise<String> promise1 = promise0.thenApply((Function<? super String, String>) function1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<String> promise2 = promise1.onError(consumer0);
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        promise2.fulfillInAsync(callable0, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.concurrent.Executor.execute(java.lang.Runnable)\" because \"executor\" is null
         //
         verifyException("com.iluwatar.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Promise<Integer> promise0 = new Promise<Integer>();
      Integer integer0 = new Integer((-1989));
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(callable0).call();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      promise0.fulfillInAsync(callable0, forkJoinPool0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Promise<Void> promise0 = new Promise<Void>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Void> promise1 = promise0.thenAccept(consumer0);
      assertNotSame(promise1, promise0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Promise<Void> promise0 = new Promise<Void>();
      Consumer<Void> consumer0 = (Consumer<Void>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      promise0.thenAccept(consumer0);
      Callable<Void> callable0 = (Callable<Void>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        promise0.fulfillInAsync(callable0, forkJoinPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.concurrent.Executor.execute(java.lang.Runnable)\" because \"executor\" is null
         //
         verifyException("com.iluwatar.promise.Promise", e);
      }
  }
}
