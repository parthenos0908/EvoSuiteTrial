/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 13:13:33 GMT 2021
 */

package com.iluwatar.specification.property;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.specification.property.Mass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Mass_ESTest extends Mass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Mass mass0 = new Mass(863.0);
      Mass mass1 = new Mass(0.0);
      boolean boolean0 = mass0.equals(mass1);
      assertFalse(boolean0);
      assertEquals("0.0kg", mass1.toString());
      assertFalse(mass1.equals((Object)mass0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Mass mass0 = new Mass(863.0);
      Mass mass1 = new Mass(0.0);
      boolean boolean0 = mass1.smallerThanOrEq(mass0);
      assertEquals("0.0kg", mass1.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Mass mass0 = new Mass(863.0);
      Mass mass1 = new Mass(0.0);
      boolean boolean0 = mass0.greaterThanOrEq(mass1);
      assertTrue(boolean0);
      assertEquals("0.0kg", mass1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Mass mass0 = new Mass(863.0);
      Mass mass1 = new Mass(0.0);
      boolean boolean0 = mass0.smallerThan(mass1);
      assertFalse(boolean0);
      assertEquals("0.0kg", mass1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Mass mass0 = new Mass(863.0);
      Mass mass1 = new Mass(0.0);
      boolean boolean0 = mass1.greaterThan(mass0);
      assertFalse(boolean0);
      assertEquals("0.0kg", mass1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Mass mass0 = new Mass((-1680.29101411));
      // Undeclared exception!
      try { 
        mass0.smallerThanOrEq((Mass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot read field \"value\"
         //
         verifyException("com.iluwatar.specification.property.Mass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Mass mass0 = new Mass(3550.6624959107926);
      // Undeclared exception!
      try { 
        mass0.smallerThan((Mass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot read field \"value\"
         //
         verifyException("com.iluwatar.specification.property.Mass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Mass mass0 = new Mass((-1680.29101411));
      // Undeclared exception!
      try { 
        mass0.greaterThanOrEq((Mass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot read field \"value\"
         //
         verifyException("com.iluwatar.specification.property.Mass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Mass mass0 = new Mass(0.0);
      Mass mass1 = new Mass(884.4208);
      boolean boolean0 = mass0.equals(mass1);
      assertFalse(boolean0);
      assertEquals("884.4208kg", mass1.toString());
      assertFalse(mass1.equals((Object)mass0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Mass mass0 = new Mass(0.0);
      boolean boolean0 = mass0.equals("0.0kg");
      assertEquals("0.0kg", mass0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Mass mass0 = new Mass(0.0);
      boolean boolean0 = mass0.equals(mass0);
      assertTrue(boolean0);
      assertEquals("0.0kg", mass0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Mass mass0 = new Mass(0.0);
      boolean boolean0 = mass0.smallerThanOrEq(mass0);
      assertEquals("0.0kg", mass0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Mass mass0 = new Mass(863.0);
      Mass mass1 = new Mass(0.0);
      boolean boolean0 = mass0.smallerThanOrEq(mass1);
      assertFalse(boolean0);
      assertEquals("0.0kg", mass1.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Mass mass0 = new Mass(0.0);
      boolean boolean0 = mass0.greaterThanOrEq(mass0);
      assertEquals("0.0kg", mass0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Mass mass0 = new Mass(863.0);
      Mass mass1 = new Mass(0.0);
      boolean boolean0 = mass1.greaterThanOrEq(mass0);
      assertFalse(boolean0);
      assertEquals("0.0kg", mass1.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Mass mass0 = new Mass(0.0);
      Mass mass1 = new Mass((-1.0));
      boolean boolean0 = mass1.smallerThan(mass0);
      assertTrue(boolean0);
      assertEquals("-1.0kg", mass1.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Mass mass0 = new Mass(0.0);
      boolean boolean0 = mass0.smallerThan(mass0);
      assertEquals("0.0kg", mass0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Mass mass0 = new Mass((-2955.35458));
      Mass mass1 = new Mass((-329.2471796714));
      boolean boolean0 = mass1.greaterThan(mass0);
      assertEquals("-329.2471796714kg", mass1.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Mass mass0 = new Mass(2251.017138337263);
      boolean boolean0 = mass0.greaterThan(mass0);
      assertEquals("2251.017138337263kg", mass0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Mass mass0 = new Mass(115.9);
      String string0 = mass0.toString();
      assertEquals("115.9kg", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Mass mass0 = new Mass((-1680.29101411));
      // Undeclared exception!
      try { 
        mass0.greaterThan((Mass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot read field \"value\"
         //
         verifyException("com.iluwatar.specification.property.Mass", e);
      }
  }
}
