/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 13:16:52 GMT 2021
 */

package com.iluwatar.specification.selector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.specification.creature.Creature;
import com.iluwatar.specification.property.Color;
import com.iluwatar.specification.selector.AbstractSelector;
import com.iluwatar.specification.selector.ColorSelector;
import com.iluwatar.specification.selector.ConjunctionSelector;
import com.iluwatar.specification.selector.MassGreaterThanSelector;
import com.iluwatar.specification.selector.MassSmallerThanOrEqSelector;
import com.iluwatar.specification.selector.NegationSelector;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractSelector_ESTest extends AbstractSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Color color0 = Color.LIGHT;
      ColorSelector colorSelector0 = new ColorSelector(color0);
      MassGreaterThanSelector massGreaterThanSelector0 = new MassGreaterThanSelector((-633.8040358709));
      AbstractSelector<Creature> abstractSelector0 = colorSelector0.or((AbstractSelector<Creature>) massGreaterThanSelector0);
      assertNotNull(abstractSelector0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Color color0 = Color.DARK;
      ColorSelector colorSelector0 = new ColorSelector(color0);
      MassSmallerThanOrEqSelector massSmallerThanOrEqSelector0 = new MassSmallerThanOrEqSelector(2444.535);
      AbstractSelector<Creature> abstractSelector0 = massSmallerThanOrEqSelector0.and((AbstractSelector<Creature>) colorSelector0);
      assertNotNull(abstractSelector0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractSelector<Object>[] abstractSelectorArray0 = (AbstractSelector<Object>[]) Array.newInstance(AbstractSelector.class, 0);
      ConjunctionSelector<Object> conjunctionSelector0 = new ConjunctionSelector<Object>(abstractSelectorArray0);
      AbstractSelector<Object> abstractSelector0 = conjunctionSelector0.not();
      assertNotNull(abstractSelector0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NegationSelector<String> negationSelector0 = new NegationSelector<String>((AbstractSelector<String>) null);
      // Undeclared exception!
      try { 
        negationSelector0.or((AbstractSelector<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NegationSelector<String> negationSelector0 = new NegationSelector<String>((AbstractSelector<String>) null);
      // Undeclared exception!
      try { 
        negationSelector0.and((AbstractSelector<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
