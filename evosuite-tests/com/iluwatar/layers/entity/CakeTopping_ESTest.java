/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 08:54:17 GMT 2021
 */

package com.iluwatar.layers.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import com.iluwatar.layers.entity.Cake;
import com.iluwatar.layers.entity.CakeTopping;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CakeTopping_ESTest extends CakeTopping_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      cakeTopping0.setName("com.iluwatar.layers.entity.CakeTopping");
      String string0 = cakeTopping0.getName();
      assertEquals("com.iluwatar.layers.entity.CakeTopping", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      Long long0 = Long.valueOf(0L);
      cakeTopping0.setId(long0);
      Long long1 = cakeTopping0.getId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      Long long0 = new Long(1383L);
      cakeTopping0.setId(long0);
      Long long1 = cakeTopping0.getId();
      assertEquals(1383L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      Long long0 = new Long((-1L));
      cakeTopping0.setId(long0);
      Long long1 = cakeTopping0.getId();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping("8s>5Jp/wh*", 2206);
      int int0 = cakeTopping0.getCalories();
      assertEquals(2206, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      Cake cake0 = new Cake();
      cakeTopping0.setCake(cake0);
      Cake cake1 = cakeTopping0.getCake();
      assertNull(cake1.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      cakeTopping0.setCalories((-1));
      int int0 = cakeTopping0.getCalories();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      cakeTopping0.setName("");
      String string0 = cakeTopping0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      Cake cake0 = cakeTopping0.getCake();
      assertNull(cake0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      int int0 = cakeTopping0.getCalories();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      Long long0 = cakeTopping0.getId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      String string0 = cakeTopping0.toString();
      assertEquals("id=null name=null calories=0", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CakeTopping cakeTopping0 = new CakeTopping();
      String string0 = cakeTopping0.getName();
      assertNull(string0);
  }
}
