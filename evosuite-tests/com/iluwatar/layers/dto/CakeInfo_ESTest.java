/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 08:48:39 GMT 2021
 */

package com.iluwatar.layers.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.layers.dto.CakeInfo;
import com.iluwatar.layers.dto.CakeLayerInfo;
import com.iluwatar.layers.dto.CakeToppingInfo;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CakeInfo_ESTest extends CakeInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CakeLayerInfo cakeLayerInfo0 = new CakeLayerInfo("", 1941);
      List<CakeLayerInfo> list0 = List.of(cakeLayerInfo0);
      CakeInfo cakeInfo0 = new CakeInfo((CakeToppingInfo) null, list0);
      int int0 = cakeInfo0.calculateTotalCalories();
      assertEquals(1941, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Long long0 = new Long(1188L);
      CakeToppingInfo cakeToppingInfo0 = new CakeToppingInfo(long0, "com.iluwatar.layers.dto.CakeToppingInfo", 0);
      LinkedList<CakeLayerInfo> linkedList0 = new LinkedList<CakeLayerInfo>();
      CakeInfo cakeInfo0 = new CakeInfo(long0, cakeToppingInfo0, linkedList0);
      CakeLayerInfo cakeLayerInfo0 = new CakeLayerInfo(long0, "S5c", (-694));
      linkedList0.add(cakeLayerInfo0);
      int int0 = cakeInfo0.calculateTotalCalories();
      assertEquals((-694), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CakeToppingInfo cakeToppingInfo0 = new CakeToppingInfo((String) null, 0);
      LinkedList<CakeLayerInfo> linkedList0 = new LinkedList<CakeLayerInfo>();
      List<CakeLayerInfo> list0 = linkedList0.subList(0, 0);
      Long long0 = new Long(0);
      CakeLayerInfo cakeLayerInfo0 = new CakeLayerInfo(long0, (String) null, 0);
      linkedList0.add(cakeLayerInfo0);
      CakeInfo cakeInfo0 = new CakeInfo(cakeToppingInfo0, list0);
      // Undeclared exception!
      try { 
        cakeInfo0.toString();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CakeToppingInfo cakeToppingInfo0 = new CakeToppingInfo((String) null, 0);
      LinkedList<CakeLayerInfo> linkedList0 = new LinkedList<CakeLayerInfo>();
      List<CakeLayerInfo> list0 = linkedList0.subList(0, 0);
      Long long0 = new Long(0);
      CakeLayerInfo cakeLayerInfo0 = new CakeLayerInfo(long0, (String) null, 0);
      linkedList0.add(cakeLayerInfo0);
      CakeInfo cakeInfo0 = new CakeInfo(cakeToppingInfo0, list0);
      // Undeclared exception!
      try { 
        cakeInfo0.calculateTotalCalories();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CakeInfo cakeInfo0 = new CakeInfo((CakeToppingInfo) null, (List<CakeLayerInfo>) null);
      // Undeclared exception!
      try { 
        cakeInfo0.calculateTotalCalories();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.List.stream()\" because \"this.cakeLayerInfos\" is null
         //
         verifyException("com.iluwatar.layers.dto.CakeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Long long0 = new Long(1188L);
      CakeToppingInfo cakeToppingInfo0 = new CakeToppingInfo(long0, "com.iluwatar.layers.dto.CakeToppingInfo", 0);
      LinkedList<CakeLayerInfo> linkedList0 = new LinkedList<CakeLayerInfo>();
      CakeInfo cakeInfo0 = new CakeInfo(long0, cakeToppingInfo0, linkedList0);
      int int0 = cakeInfo0.calculateTotalCalories();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CakeInfo cakeInfo0 = new CakeInfo((CakeToppingInfo) null, (List<CakeLayerInfo>) null);
      // Undeclared exception!
      try { 
        cakeInfo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.List.stream()\" because \"this.cakeLayerInfos\" is null
         //
         verifyException("com.iluwatar.layers.dto.CakeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Long long0 = new Long(1188L);
      CakeToppingInfo cakeToppingInfo0 = new CakeToppingInfo(long0, "com.iluwatar.layers.dto.CakeToppingInfo", 0);
      LinkedList<CakeLayerInfo> linkedList0 = new LinkedList<CakeLayerInfo>();
      CakeInfo cakeInfo0 = new CakeInfo(long0, cakeToppingInfo0, linkedList0);
      String string0 = cakeInfo0.toString();
      assertEquals("CakeInfo id=1188 topping=CakeToppingInfo id=1188 name=com.iluwatar.layers.dto.CakeToppingInfo calories=0 layers=[] totalCalories=0", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<CakeLayerInfo> linkedList0 = new LinkedList<CakeLayerInfo>();
      CakeInfo cakeInfo0 = null;
      try {
        cakeInfo0 = new CakeInfo((Long) null, (CakeToppingInfo) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
