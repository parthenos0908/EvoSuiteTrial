/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 09:49:39 GMT 2021
 */

package com.iluwatar.model.view.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import com.iluwatar.model.view.controller.Fatigue;
import com.iluwatar.model.view.controller.GiantModel;
import com.iluwatar.model.view.controller.Health;
import com.iluwatar.model.view.controller.Nourishment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GiantModel_ESTest extends GiantModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Health health0 = Health.DEAD;
      Fatigue fatigue0 = Fatigue.TIRED;
      Nourishment nourishment0 = Nourishment.HUNGRY;
      GiantModel giantModel0 = new GiantModel(health0, fatigue0, nourishment0);
      Nourishment nourishment1 = giantModel0.getNourishment();
      assertEquals("hungry", nourishment1.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Health health0 = Health.DEAD;
      Fatigue fatigue0 = Fatigue.ALERT;
      Nourishment nourishment0 = Nourishment.STARVING;
      GiantModel giantModel0 = new GiantModel(health0, fatigue0, nourishment0);
      giantModel0.setHealth((Health) null);
      giantModel0.getHealth();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Health health0 = Health.DEAD;
      Fatigue fatigue0 = Fatigue.TIRED;
      Nourishment nourishment0 = Nourishment.HUNGRY;
      GiantModel giantModel0 = new GiantModel(health0, fatigue0, nourishment0);
      Fatigue fatigue1 = giantModel0.getFatigue();
      assertEquals("tired", fatigue1.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Health health0 = Health.DEAD;
      Fatigue fatigue0 = Fatigue.TIRED;
      Nourishment nourishment0 = Nourishment.HUNGRY;
      GiantModel giantModel0 = new GiantModel(health0, fatigue0, nourishment0);
      giantModel0.setNourishment(nourishment0);
      assertEquals(Health.DEAD, giantModel0.getHealth());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Health health0 = Health.DEAD;
      Fatigue fatigue0 = Fatigue.TIRED;
      Nourishment nourishment0 = Nourishment.HUNGRY;
      GiantModel giantModel0 = new GiantModel(health0, fatigue0, nourishment0);
      giantModel0.setFatigue(fatigue0);
      assertEquals(Nourishment.HUNGRY, giantModel0.getNourishment());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Health health0 = Health.DEAD;
      Fatigue fatigue0 = Fatigue.ALERT;
      Nourishment nourishment0 = Nourishment.HUNGRY;
      GiantModel giantModel0 = new GiantModel(health0, fatigue0, nourishment0);
      String string0 = giantModel0.toString();
      assertEquals("The giant looks dead, alert and hungry.", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Fatigue fatigue0 = Fatigue.ALERT;
      Health health0 = Health.WOUNDED;
      GiantModel giantModel0 = new GiantModel(health0, fatigue0, (Nourishment) null);
      giantModel0.getNourishment();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Nourishment nourishment0 = Nourishment.STARVING;
      Health health0 = Health.WOUNDED;
      GiantModel giantModel0 = new GiantModel(health0, (Fatigue) null, nourishment0);
      giantModel0.getFatigue();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Health health0 = Health.DEAD;
      Fatigue fatigue0 = Fatigue.ALERT;
      Nourishment nourishment0 = Nourishment.STARVING;
      GiantModel giantModel0 = new GiantModel(health0, fatigue0, nourishment0);
      Health health1 = giantModel0.getHealth();
      assertEquals("dead", health1.toString());
  }
}
