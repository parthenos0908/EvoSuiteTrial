/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 11:51:16 GMT 2021
 */

package com.iluwatar.repository;

import org.junit.Test;
import static org.junit.Assert.*;
import com.iluwatar.repository.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Person_ESTest extends Person_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Person person0 = new Person();
      Person person1 = new Person("W8}", "^@2@v<@Z`Ad>U+XJa", 1456);
      boolean boolean0 = person1.equals(person0);
      assertEquals("Person [id=null, name=W8}, surname=^@2@v<@Z`Ad>U+XJa, age=1456]", person1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Person person0 = new Person("K'[28e~Zh155'dx{Md", "\"?", (-1448));
      person0.hashCode();
      assertEquals("Person [id=null, name=K'[28e~Zh155'dx{Md, surname=\"?, age=-1448]", person0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Person person0 = new Person((String) null, "V/$W", (-856));
      person0.getSurname();
      assertEquals("Person [id=null, name=null, surname=V/$W, age=-856]", person0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Person person0 = new Person();
      person0.setSurname("");
      String string0 = person0.getSurname();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Person person0 = new Person("W8}", "^@2@v<@Z`Ad>U+XJa", 1456);
      person0.getName();
      assertEquals("Person [id=null, name=W8}, surname=^@2@v<@Z`Ad>U+XJa, age=1456]", person0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Person person0 = new Person();
      person0.setName("");
      String string0 = person0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Person person0 = new Person();
      Long long0 = new Long(0L);
      person0.setId(long0);
      Long long1 = person0.getId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Person person0 = new Person("K'[28e~Zh155'dx{Md", "\"?", (-1448));
      Long long0 = new Long(1304L);
      person0.setId(long0);
      person0.getId();
      assertEquals("Person [id=1304, name=K'[28e~Zh155'dx{Md, surname=\"?, age=-1448]", person0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Person person0 = new Person();
      Long long0 = new Long((-956L));
      person0.setId(long0);
      Long long1 = person0.getId();
      assertEquals((-956L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Person person0 = new Person("K'[28e~Zh155'dx{Md", "\"?", (-1448));
      person0.setAge(1);
      int int0 = person0.getAge();
      assertEquals("Person [id=null, name=K'[28e~Zh155'dx{Md, surname=\"?, age=1]", person0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Person person0 = new Person();
      person0.setAge((-2735));
      int int0 = person0.getAge();
      assertEquals((-2735), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Person person0 = new Person();
      Person person1 = new Person();
      assertTrue(person1.equals((Object)person0));
      
      person1.setSurname("W8}");
      boolean boolean0 = person0.equals(person1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Person person0 = new Person();
      person0.setName("");
      person0.setAge((-2735));
      Person person1 = new Person("", "", (-2735));
      boolean boolean0 = person1.equals(person0);
      assertEquals("Person [id=null, name=, surname=null, age=-2735]", person0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Person person0 = new Person();
      Person person1 = new Person();
      assertTrue(person1.equals((Object)person0));
      
      person1.setName("7'MHk,cbzVC;N:");
      boolean boolean0 = person0.equals(person1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Person person0 = new Person();
      Long long0 = new Long((-956L));
      person0.setId(long0);
      Person person1 = new Person();
      assertFalse(person1.equals((Object)person0));
      
      person1.setId(long0);
      boolean boolean0 = person1.equals(person0);
      assertTrue(person1.equals((Object)person0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Person person0 = new Person();
      Long long0 = new Long((-956L));
      person0.setId(long0);
      Person person1 = new Person();
      boolean boolean0 = person1.equals(person0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Person person0 = new Person();
      Long long0 = new Long((-956L));
      Person person1 = new Person();
      assertTrue(person1.equals((Object)person0));
      
      person1.setId(long0);
      boolean boolean0 = person1.equals(person0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Person person0 = new Person();
      Person person1 = new Person("+*{<9", "", 2901);
      boolean boolean0 = person0.equals(person1);
      assertFalse(boolean0);
      assertEquals("Person [id=null, name=+*{<9, surname=, age=2901]", person1.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Person person0 = new Person();
      boolean boolean0 = person0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Person person0 = new Person();
      boolean boolean0 = person0.equals(person0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Person person0 = new Person();
      Object object0 = new Object();
      boolean boolean0 = person0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Person person0 = new Person();
      person0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Person person0 = new Person();
      person0.setAge((-2735));
      Person person1 = new Person("", "", (-2735));
      boolean boolean0 = person1.equals(person0);
      assertEquals((-2735), person0.getAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Person person0 = new Person();
      int int0 = person0.getAge();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Person person0 = new Person();
      String string0 = person0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Person person0 = new Person();
      String string0 = person0.toString();
      assertEquals("Person [id=null, name=null, surname=null, age=0]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Person person0 = new Person();
      Long long0 = person0.getId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Person person0 = new Person();
      Long long0 = new Long((-956L));
      person0.setId(long0);
      person0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Person person0 = new Person();
      String string0 = person0.getSurname();
      assertNull(string0);
  }
}
