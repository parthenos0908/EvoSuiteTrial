/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 10:15:47 GMT 2021
 */

package com.iluwatar.objectmother;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.objectmother.King;
import com.iluwatar.objectmother.Queen;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class King_ESTest extends King_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      King king0 = new King();
      Queen queen0 = new Queen();
      king0.isHappy = true;
      king0.flirt(queen0);
      assertFalse(king0.isHappy());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      King king0 = new King();
      assertFalse(king0.isHappy());
      
      king0.makeHappy();
      boolean boolean0 = king0.isHappy();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      King king0 = new King();
      // Undeclared exception!
      try { 
        king0.flirt((Queen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.objectmother.Queen.getFlirted(com.iluwatar.objectmother.King)\" because \"queen\" is null
         //
         verifyException("com.iluwatar.objectmother.King", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      King king0 = new King();
      boolean boolean0 = king0.isHappy();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      King king0 = new King();
      king0.makeSober();
      assertFalse(king0.isHappy());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      King king0 = new King();
      assertFalse(king0.isHappy());
      
      king0.makeHappy();
      Queen queen0 = new Queen();
      queen0.setFlirtiness(true);
      king0.flirt(queen0);
      assertTrue(king0.isHappy());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      King king0 = new King();
      king0.makeUnhappy();
      assertFalse(king0.isHappy());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      King king0 = new King();
      king0.makeDrunk();
      assertFalse(king0.isHappy());
  }
}
