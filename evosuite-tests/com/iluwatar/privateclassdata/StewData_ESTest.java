/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 10:44:24 GMT 2021
 */

package com.iluwatar.privateclassdata;

import org.junit.Test;
import static org.junit.Assert.*;
import com.iluwatar.privateclassdata.StewData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StewData_ESTest extends StewData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StewData stewData0 = new StewData(0, 1053, 1, 1558);
      int int0 = stewData0.getNumPotatoes();
      assertEquals(0, int0);
      assertEquals(1, stewData0.getNumMeat());
      assertEquals(1053, stewData0.getNumCarrots());
      assertEquals(1558, stewData0.getNumPeppers());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StewData stewData0 = new StewData((-1), (-1), (-1), (-1));
      int int0 = stewData0.getNumPotatoes();
      assertEquals((-1), stewData0.getNumMeat());
      assertEquals((-1), stewData0.getNumPeppers());
      assertEquals((-1), int0);
      assertEquals((-1), stewData0.getNumCarrots());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StewData stewData0 = new StewData(0, 1053, 1, 1558);
      int int0 = stewData0.getNumPeppers();
      assertEquals(1558, int0);
      assertEquals(0, stewData0.getNumPotatoes());
      assertEquals(1, stewData0.getNumMeat());
      assertEquals(1053, stewData0.getNumCarrots());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StewData stewData0 = new StewData((-1), (-1), (-1), (-1));
      int int0 = stewData0.getNumPeppers();
      assertEquals((-1), int0);
      assertEquals((-1), stewData0.getNumPotatoes());
      assertEquals((-1), stewData0.getNumCarrots());
      assertEquals((-1), stewData0.getNumMeat());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StewData stewData0 = new StewData(0, 0, 0, 0);
      int int0 = stewData0.getNumMeat();
      assertEquals(0, stewData0.getNumPotatoes());
      assertEquals(0, stewData0.getNumPeppers());
      assertEquals(0, int0);
      assertEquals(0, stewData0.getNumCarrots());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StewData stewData0 = new StewData(3115, 1, 3115, 0);
      int int0 = stewData0.getNumMeat();
      assertEquals(3115, int0);
      assertEquals(1, stewData0.getNumCarrots());
      assertEquals(3115, stewData0.getNumPotatoes());
      assertEquals(0, stewData0.getNumPeppers());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StewData stewData0 = new StewData((-282), 0, (-282), (-282));
      int int0 = stewData0.getNumCarrots();
      assertEquals((-282), stewData0.getNumPotatoes());
      assertEquals((-282), stewData0.getNumMeat());
      assertEquals((-282), stewData0.getNumPeppers());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StewData stewData0 = new StewData(3115, 1, 3115, 0);
      int int0 = stewData0.getNumCarrots();
      assertEquals(3115, stewData0.getNumPotatoes());
      assertEquals(0, stewData0.getNumPeppers());
      assertEquals(1, int0);
      assertEquals(3115, stewData0.getNumMeat());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StewData stewData0 = new StewData(1046, (-1636), (-1636), 0);
      int int0 = stewData0.getNumMeat();
      assertEquals(0, stewData0.getNumPeppers());
      assertEquals(1046, stewData0.getNumPotatoes());
      assertEquals((-1636), int0);
      assertEquals((-1636), stewData0.getNumCarrots());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StewData stewData0 = new StewData(1046, (-1636), (-1636), 0);
      int int0 = stewData0.getNumPeppers();
      assertEquals(1046, stewData0.getNumPotatoes());
      assertEquals((-1636), stewData0.getNumCarrots());
      assertEquals(0, int0);
      assertEquals((-1636), stewData0.getNumMeat());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StewData stewData0 = new StewData(1046, (-1636), (-1636), 0);
      int int0 = stewData0.getNumCarrots();
      assertEquals((-1636), stewData0.getNumMeat());
      assertEquals(0, stewData0.getNumPeppers());
      assertEquals(1046, stewData0.getNumPotatoes());
      assertEquals((-1636), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StewData stewData0 = new StewData(1355, 1609, 1609, 3469);
      int int0 = stewData0.getNumPotatoes();
      assertEquals(1609, stewData0.getNumCarrots());
      assertEquals(3469, stewData0.getNumPeppers());
      assertEquals(1609, stewData0.getNumMeat());
      assertEquals(1355, int0);
  }
}
