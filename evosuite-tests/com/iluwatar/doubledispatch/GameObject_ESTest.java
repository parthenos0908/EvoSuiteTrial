/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 04:48:29 GMT 2021
 */

package com.iluwatar.doubledispatch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.doubledispatch.FlamingAsteroid;
import com.iluwatar.doubledispatch.GameObject;
import com.iluwatar.doubledispatch.Meteoroid;
import com.iluwatar.doubledispatch.SpaceStationIss;
import com.iluwatar.doubledispatch.SpaceStationMir;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameObject_ESTest extends GameObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpaceStationMir spaceStationMir0 = new SpaceStationMir(1, 1, 0, (-516));
      SpaceStationIss spaceStationIss0 = new SpaceStationIss(0, (-2676), 3188, 4);
      spaceStationIss0.collisionResolve(spaceStationMir0);
      assertTrue(spaceStationIss0.isDamaged());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpaceStationMir spaceStationMir0 = new SpaceStationMir(1501, 1501, 2, 2);
      Meteoroid meteoroid0 = new Meteoroid(1501, (-558), 3, (-1));
      spaceStationMir0.collisionResolve(meteoroid0);
      assertTrue(spaceStationMir0.isDamaged());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FlamingAsteroid flamingAsteroid0 = new FlamingAsteroid(2, 2, 4, 2);
      flamingAsteroid0.collisionResolve(flamingAsteroid0);
      assertTrue(flamingAsteroid0.isOnFire());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Meteoroid meteoroid0 = new Meteoroid(0, (-315), 0, 2);
      meteoroid0.setDamaged(true);
      assertTrue(meteoroid0.isDamaged());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpaceStationIss spaceStationIss0 = new SpaceStationIss(1240, 1240, (-648), (-648));
      spaceStationIss0.setOnFire(true);
      boolean boolean0 = spaceStationIss0.isOnFire();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Meteoroid meteoroid0 = new Meteoroid(0, 0, 0, 0);
      // Undeclared exception!
      try { 
        meteoroid0.collisionResolve((SpaceStationMir) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"Object.getClass()\" because \"mir\" is null
         //
         verifyException("com.iluwatar.doubledispatch.Meteoroid", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpaceStationIss spaceStationIss0 = new SpaceStationIss(1240, 1240, (-648), (-648));
      // Undeclared exception!
      try { 
        spaceStationIss0.collisionResolve((SpaceStationIss) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"Object.getClass()\" because \"iss\" is null
         //
         verifyException("com.iluwatar.doubledispatch.SpaceStationMir", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpaceStationIss spaceStationIss0 = new SpaceStationIss((-81), (-81), (-81), (-81));
      // Undeclared exception!
      try { 
        spaceStationIss0.collisionResolve((Meteoroid) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"Object.getClass()\" because \"meteoroid\" is null
         //
         verifyException("com.iluwatar.doubledispatch.SpaceStationMir", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Meteoroid meteoroid0 = new Meteoroid(0, 0, 0, 0);
      // Undeclared exception!
      try { 
        meteoroid0.collisionResolve((FlamingAsteroid) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"Object.getClass()\" because \"asteroid\" is null
         //
         verifyException("com.iluwatar.doubledispatch.Meteoroid", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpaceStationIss spaceStationIss0 = new SpaceStationIss((-31), (-31), (-31), (-31));
      // Undeclared exception!
      try { 
        spaceStationIss0.collision((GameObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.doubledispatch.GameObject.collisionResolve(com.iluwatar.doubledispatch.SpaceStationIss)\" because \"gameObject\" is null
         //
         verifyException("com.iluwatar.doubledispatch.SpaceStationIss", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FlamingAsteroid flamingAsteroid0 = new FlamingAsteroid((-559), 3, 0, (-558));
      flamingAsteroid0.isDamaged();
      assertTrue(flamingAsteroid0.isOnFire());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpaceStationIss spaceStationIss0 = new SpaceStationIss(0, 0, 1, 805);
      boolean boolean0 = spaceStationIss0.isOnFire();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpaceStationMir spaceStationMir0 = new SpaceStationMir(1, 1, 0, (-516));
      SpaceStationIss spaceStationIss0 = new SpaceStationIss(0, (-2676), 3188, 4);
      spaceStationMir0.collisionResolve(spaceStationIss0);
      boolean boolean0 = spaceStationMir0.isDamaged();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FlamingAsteroid flamingAsteroid0 = new FlamingAsteroid(0, 1, 0, 1225);
      flamingAsteroid0.collision(flamingAsteroid0);
      assertTrue(flamingAsteroid0.isOnFire());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpaceStationMir spaceStationMir0 = new SpaceStationMir((-13), (-13), (-13), (-13));
      String string0 = spaceStationMir0.toString();
      assertEquals("SpaceStationMir at [-13,-13,-13,-13] damaged=false onFire=false", string0);
  }
}
