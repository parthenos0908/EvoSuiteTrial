/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 04:49:46 GMT 2021
 */

package com.iluwatar.doubledispatch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.doubledispatch.Rectangle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0, 0, 0, 0);
      Rectangle rectangle1 = new Rectangle(0, 0, 0, 1606);
      boolean boolean0 = rectangle0.intersectsWith(rectangle1);
      assertTrue(boolean0);
      assertEquals(0, rectangle1.getRight());
      assertEquals(0, rectangle1.getLeft());
      assertEquals(1606, rectangle1.getBottom());
      assertEquals(0, rectangle1.getTop());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3, 3, 3, 3);
      Rectangle rectangle1 = new Rectangle(3, 0, 3, 3);
      boolean boolean0 = rectangle0.intersectsWith(rectangle1);
      assertEquals(0, rectangle1.getTop());
      assertTrue(boolean0);
      assertEquals(3, rectangle0.getTop());
      assertEquals(3, rectangle1.getRight());
      assertEquals(3, rectangle1.getBottom());
      assertEquals(3, rectangle1.getLeft());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-472), (-472), (-472), (-2165));
      Rectangle rectangle1 = new Rectangle((-472), (-472), 1434, (-472));
      boolean boolean0 = rectangle0.intersectsWith(rectangle1);
      assertEquals((-472), rectangle1.getTop());
      assertEquals((-472), rectangle0.getLeft());
      assertEquals(1434, rectangle1.getRight());
      assertEquals((-472), rectangle1.getLeft());
      assertEquals((-2165), rectangle0.getBottom());
      assertFalse(boolean0);
      assertEquals((-472), rectangle0.getTop());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1, 1, 1, (-2470));
      Rectangle rectangle1 = new Rectangle((-253), (-263), (-2470), (-3114));
      boolean boolean0 = rectangle0.intersectsWith(rectangle1);
      assertEquals((-253), rectangle1.getLeft());
      assertFalse(boolean0);
      assertEquals((-263), rectangle1.getTop());
      assertEquals((-2470), rectangle1.getRight());
      assertEquals((-3114), rectangle1.getBottom());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1), 0, (-1), (-2422));
      int int0 = rectangle0.getTop();
      assertEquals((-1), rectangle0.getLeft());
      assertEquals(0, int0);
      assertEquals((-1), rectangle0.getRight());
      assertEquals((-2422), rectangle0.getBottom());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-253), (-263), (-2470), (-3114));
      int int0 = rectangle0.getTop();
      assertEquals((-253), rectangle0.getLeft());
      assertEquals((-263), int0);
      assertEquals((-2470), rectangle0.getRight());
      assertEquals((-3114), rectangle0.getBottom());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3, (-1780), 0, (-1424));
      int int0 = rectangle0.getRight();
      assertEquals((-1424), rectangle0.getBottom());
      assertEquals(3, rectangle0.getLeft());
      assertEquals((-1780), rectangle0.getTop());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-253), (-263), (-2470), (-3114));
      int int0 = rectangle0.getRight();
      assertEquals((-263), rectangle0.getTop());
      assertEquals((-253), rectangle0.getLeft());
      assertEquals((-2470), int0);
      assertEquals((-3114), rectangle0.getBottom());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0, 0, 0, 4);
      int int0 = rectangle0.getLeft();
      assertEquals(0, rectangle0.getRight());
      assertEquals(4, rectangle0.getBottom());
      assertEquals(0, rectangle0.getTop());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-253), (-263), (-2470), (-3114));
      int int0 = rectangle0.getLeft();
      assertEquals((-3114), rectangle0.getBottom());
      assertEquals((-2470), rectangle0.getRight());
      assertEquals((-253), int0);
      assertEquals((-263), rectangle0.getTop());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3215, 4, (-98), 0);
      int int0 = rectangle0.getBottom();
      assertEquals(0, int0);
      assertEquals(4, rectangle0.getTop());
      assertEquals((-98), rectangle0.getRight());
      assertEquals(3215, rectangle0.getLeft());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1, 1, 1, (-2470));
      int int0 = rectangle0.getBottom();
      assertEquals(1, rectangle0.getLeft());
      assertEquals((-2470), int0);
      assertEquals(1, rectangle0.getRight());
      assertEquals(1, rectangle0.getTop());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1), 0, (-1), (-2422));
      // Undeclared exception!
      try { 
        rectangle0.intersectsWith((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.doubledispatch.Rectangle.getLeft()\"
         //
         verifyException("com.iluwatar.doubledispatch.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1, 1, 1, (-2470));
      int int0 = rectangle0.getTop();
      assertEquals(1, rectangle0.getRight());
      assertEquals((-2470), rectangle0.getBottom());
      assertEquals(1, int0);
      assertEquals(1, rectangle0.getLeft());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3, 3, 3, 3);
      int int0 = rectangle0.getBottom();
      assertEquals(3, int0);
      assertEquals(3, rectangle0.getTop());
      assertEquals(3, rectangle0.getLeft());
      assertEquals(3, rectangle0.getRight());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3, 3, 3, 3);
      int int0 = rectangle0.getLeft();
      assertEquals(3, rectangle0.getBottom());
      assertEquals(3, int0);
      assertEquals(3, rectangle0.getRight());
      assertEquals(3, rectangle0.getTop());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3, 3, 3, 3);
      int int0 = rectangle0.getRight();
      assertEquals(3, int0);
      assertEquals(3, rectangle0.getTop());
      assertEquals(3, rectangle0.getBottom());
      assertEquals(3, rectangle0.getLeft());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1953, 1953, 1953, 1953);
      Rectangle rectangle1 = new Rectangle(1953, 1953, 1953, (-3463));
      boolean boolean0 = rectangle0.intersectsWith(rectangle1);
      assertEquals((-3463), rectangle1.getBottom());
      assertFalse(boolean0);
      assertEquals(1953, rectangle1.getLeft());
      assertEquals(1953, rectangle1.getRight());
      assertEquals(1953, rectangle1.getTop());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3, 3, 3, 3);
      String string0 = rectangle0.toString();
      assertEquals("[3,3,3,3]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(14, 3, 3, 3);
      boolean boolean0 = rectangle0.intersectsWith(rectangle0);
      assertEquals(3, rectangle0.getRight());
      assertFalse(boolean0);
      assertEquals(3, rectangle0.getTop());
      assertEquals(3, rectangle0.getBottom());
      assertEquals(14, rectangle0.getLeft());
  }
}
