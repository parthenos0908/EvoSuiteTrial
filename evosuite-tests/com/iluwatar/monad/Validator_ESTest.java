/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 10:00:25 GMT 2021
 */

package com.iluwatar.monad;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.monad.Validator;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Validator_ESTest extends Validator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Validator<Object> validator0 = Validator.of((Object) "E6u0B;:6BY7s.y");
      // Undeclared exception!
      try { 
        validator0.validate((Predicate<Object>) null, "E6u0B;:6BY7s.y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.function.Predicate.test(Object)\" because \"validation\" is null
         //
         verifyException("com.iluwatar.monad.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Validator<String> validator0 = Validator.of("5bk3GWUTNb^x\"gdp");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "5bk3GWUTNb^x\"gdp");
      // Undeclared exception!
      try { 
        validator0.validate((Function<String, Object>) null, predicate0, "5bk3GWUTNb^x\"gdp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.function.Function.andThen(java.util.function.Function)\" because \"projection\" is null
         //
         verifyException("com.iluwatar.monad.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validator.of((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Validator<String> validator0 = Validator.of("!xy^,l7g:'Y)~RQF0K");
      Predicate<String> predicate0 = Predicate.isEqual((Object) validator0);
      Predicate<String> predicate1 = Predicate.not((Predicate<? super String>) predicate0);
      Validator<String> validator1 = validator0.validate(predicate1, ";_Xqj");
      assertSame(validator1, validator0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Validator<String> validator0 = Validator.of("!xy^,l7g:'Y)~RQF0K");
      String string0 = validator0.get();
      assertEquals("!xy^,l7g:'Y)~RQF0K", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Validator<String> validator0 = Validator.of("!xy^,l7g:'Y)~RQF0K");
      Predicate<String> predicate0 = Predicate.isEqual((Object) validator0);
      validator0.validate(predicate0, "=4UO{b-nsnBbS");
      try { 
        validator0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.monad.Validator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Validator<String> validator0 = Validator.of("!xy^,l7g:'Y)~RQF0K");
      Function<String, String> function0 = Function.identity();
      Predicate<String> predicate0 = Predicate.isEqual((Object) validator0);
      Predicate<String> predicate1 = Predicate.not((Predicate<? super String>) predicate0);
      Validator<String> validator1 = validator0.validate(function0, predicate1, ";_Xqj");
      assertSame(validator0, validator1);
  }
}
