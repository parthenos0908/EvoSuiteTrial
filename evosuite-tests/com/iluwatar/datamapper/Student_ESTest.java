/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 04:24:37 GMT 2021
 */

package com.iluwatar.datamapper;

import org.junit.Test;
import static org.junit.Assert.*;
import com.iluwatar.datamapper.Student;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Student_ESTest extends Student_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Student student0 = new Student(3191, "La}'T0T0vBeMey]B", '+');
      Student student1 = new Student((-1), "yJ&af(B06]?]]h`", 'a');
      boolean boolean0 = student0.equals(student1);
      assertEquals("Student [studentId=-1, name=yJ&af(B06]?]]h`, grade=a]", student1.toString());
      assertEquals((-1), student1.getStudentId());
      assertFalse(boolean0);
      assertFalse(student1.equals((Object)student0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Student student0 = new Student((-2555), "{Oi[_Fi&", 'C');
      student0.setStudentId(0);
      int int0 = student0.getStudentId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Student student0 = new Student(2970, "", 'C');
      student0.setStudentId((-2052));
      int int0 = student0.getStudentId();
      assertEquals((-2052), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Student student0 = new Student(1663, (String) null, 'g');
      student0.getName();
      assertEquals("Student [studentId=1663, name=null, grade=g]", student0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Student student0 = new Student(2585, "", 'a');
      student0.getName();
      assertEquals("Student [studentId=2585, name=, grade=a]", student0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Student student0 = new Student(803, (String) null, 'r');
      student0.setGrade(',');
      char char0 = student0.getGrade();
      assertEquals(',', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Student student0 = new Student((-1), "1", '8');
      char char0 = student0.getGrade();
      assertEquals("Student [studentId=-1, name=1, grade=8]", student0.toString());
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Student student0 = new Student(2585, "", 'a');
      int int0 = student0.getStudentId();
      assertEquals(2585, int0);
      assertEquals('a', student0.getGrade());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Student student0 = new Student((-176), "c/1cD", 'B');
      student0.setStudentId(0);
      Student student1 = new Student(0, "Student [studentId=-176, name=c/1cD, grade=(]", '2');
      boolean boolean0 = student0.equals(student1);
      assertEquals("Student [studentId=0, name=c/1cD, grade=B]", student0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Student student0 = new Student(3191, "La}'T0T0vBeMey]B", '+');
      Student student1 = new Student(1, "", '&');
      boolean boolean0 = student1.equals(student0);
      assertFalse(student0.equals((Object)student1));
      assertFalse(boolean0);
      assertEquals(1, student1.getStudentId());
      assertEquals("Student [studentId=1, name=, grade=&]", student1.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Student student0 = new Student(0, "La}'T0T0vBeMey]B", 't');
      boolean boolean0 = student0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("Student [studentId=0, name=La}'T0T0vBeMey]B, grade=t]", student0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Student student0 = new Student('D', "A", 'D');
      boolean boolean0 = student0.equals(student0);
      assertEquals("Student [studentId=68, name=A, grade=D]", student0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Student student0 = new Student(3191, "La}'T0T0vBeMey]B", '+');
      boolean boolean0 = student0.equals("");
      assertFalse(boolean0);
      assertEquals("Student [studentId=3191, name=La}'T0T0vBeMey]B, grade=+]", student0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Student student0 = new Student(803, (String) null, 'r');
      char char0 = student0.getGrade();
      assertEquals("Student [studentId=803, name=null, grade=r]", student0.toString());
      assertEquals('r', char0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Student student0 = new Student(3191, "La}'T0T0vBeMey]B", '+');
      student0.setName("");
      assertEquals("Student [studentId=3191, name=, grade=+]", student0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Student student0 = new Student(3191, "La}'T0T0vBeMey]B", '+');
      String string0 = student0.toString();
      assertEquals("Student [studentId=3191, name=La}'T0T0vBeMey]B, grade=+]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Student student0 = new Student(3191, "La}'T0T0vBeMey]B", '+');
      student0.getName();
      assertEquals("Student [studentId=3191, name=La}'T0T0vBeMey]B, grade=+]", student0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Student student0 = new Student(2585, "", 'a');
      student0.hashCode();
      assertEquals('a', student0.getGrade());
      assertEquals(2585, student0.getStudentId());
  }
}
