/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 04:05:35 GMT 2021
 */

package com.iluwatar.cqrs.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.cqrs.dto.Author;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Author_ESTest extends Author_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Author author0 = new Author();
      String string0 = author0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Author author0 = new Author("", "", "");
      String string0 = author0.getUsername();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Author author0 = new Author();
      String string0 = author0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Author author0 = new Author("I/v-x??QBD", "I/v-x??QBD", "o{A\"R");
      author0.getName();
      assertEquals("AuthorDTO [name=I/v-x??QBD, email=I/v-x??QBD, username=o{A\"R]", author0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Author author0 = new Author();
      String string0 = author0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Author author0 = new Author("", "", "");
      String string0 = author0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Author author0 = new Author();
      Author author1 = new Author();
      // Undeclared exception!
      try { 
        author0.equals(author1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Author author0 = new Author("I/v-x??QBD", "I/v-x??QBD", "o{A\"R");
      author0.getEmail();
      assertEquals("AuthorDTO [name=I/v-x??QBD, email=I/v-x??QBD, username=o{A\"R]", author0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Author author0 = new Author("I/v-x??QBD", "I/v-x??QBD", "o{A\"R");
      author0.getUsername();
      assertEquals("AuthorDTO [name=I/v-x??QBD, email=I/v-x??QBD, username=o{A\"R]", author0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Author author0 = new Author("", "", "");
      String string0 = author0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Author author0 = new Author("F/o", "F/o", "F/o");
      Author author1 = new Author("F/o", "F/o", "F/o");
      boolean boolean0 = author0.equals(author1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Author author0 = new Author("-", "-", "-");
      Author author1 = new Author("0", "0", "-");
      boolean boolean0 = author1.equals(author0);
      assertFalse(boolean0);
      assertEquals("AuthorDTO [name=0, email=0, username=-]", author1.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Author author0 = new Author();
      Author author1 = new Author("-", "-", "-");
      boolean boolean0 = author1.equals(author0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Author author0 = new Author("", "", "");
      boolean boolean0 = author0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Author author0 = new Author();
      boolean boolean0 = author0.equals(author0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Author author0 = new Author("", "", "");
      author0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Author author0 = new Author("F/o", "F/o", "F/o");
      Author author1 = new Author("f6Q", "F/o", "F/o");
      boolean boolean0 = author0.equals(author1);
      assertFalse(boolean0);
      assertEquals("AuthorDTO [name=f6Q, email=F/o, username=F/o]", author1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Author author0 = new Author("I/v-x??QBD", "I/v-x??QBD", "o{A\"R");
      String string0 = author0.toString();
      assertEquals("AuthorDTO [name=I/v-x??QBD, email=I/v-x??QBD, username=o{A\"R]", string0);
  }
}
