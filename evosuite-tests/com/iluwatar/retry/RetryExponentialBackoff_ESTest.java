/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 11:55:48 GMT 2021
 */

package com.iluwatar.retry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.retry.BusinessException;
import com.iluwatar.retry.BusinessOperation;
import com.iluwatar.retry.FindCustomer;
import com.iluwatar.retry.Retry;
import com.iluwatar.retry.RetryExponentialBackoff;
import java.lang.reflect.Array;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RetryExponentialBackoff_ESTest extends RetryExponentialBackoff_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BusinessException businessException0 = new BusinessException("w[0?<a9Ty#..");
      BusinessException[] businessExceptionArray0 = new BusinessException[2];
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessException0;
      FindCustomer findCustomer0 = new FindCustomer("8Npf", businessExceptionArray0);
      Object object0 = new Object();
      Predicate<Exception> predicate0 = Predicate.isEqual(object0);
      Predicate<Exception> predicate1 = Predicate.not((Predicate<? super Exception>) predicate0);
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate0;
      Random.setNextRandom((-350));
      RetryExponentialBackoff<String> retryExponentialBackoff0 = new RetryExponentialBackoff<String>(findCustomer0, 4526, 1L, predicateArray0);
      String string0 = retryExponentialBackoff0.perform();
      assertEquals("8Npf", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BusinessException businessException0 = new BusinessException("com.iluwatar.retry.FindCusomer");
      BusinessException[] businessExceptionArray0 = new BusinessException[2];
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessException0;
      FindCustomer findCustomer0 = new FindCustomer("com.iluwatar.retry.FindCusomer", businessExceptionArray0);
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 0);
      RetryExponentialBackoff<String> retryExponentialBackoff0 = new RetryExponentialBackoff<String>(findCustomer0, (-1154), (-1154), predicateArray0);
      try { 
        retryExponentialBackoff0.perform();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 0);
      BusinessOperation<Predicate<Exception>> businessOperation0 = (BusinessOperation<Predicate<Exception>>) mock(BusinessOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(businessOperation0).perform();
      Retry<Predicate<Exception>> retry0 = new Retry<Predicate<Exception>>(businessOperation0, 0, 4486L, predicateArray0);
      RetryExponentialBackoff<Predicate<Exception>> retryExponentialBackoff0 = new RetryExponentialBackoff<Predicate<Exception>>(retry0, (-2505), (-805L), predicateArray0);
      Predicate<Exception> predicate0 = retryExponentialBackoff0.perform();
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BusinessException[] businessExceptionArray0 = new BusinessException[3];
      BusinessException businessException0 = new BusinessException("");
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessException0;
      businessExceptionArray0[2] = businessException0;
      FindCustomer findCustomer0 = new FindCustomer("sFYB,u", businessExceptionArray0);
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Exception> predicate0 = Predicate.isEqual((Object) businessException0);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicateArray0[0];
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicateArray0[1];
      RetryExponentialBackoff<String> retryExponentialBackoff0 = new RetryExponentialBackoff<String>(findCustomer0, 18, 18, predicateArray0);
      retryExponentialBackoff0.perform();
      int int0 = retryExponentialBackoff0.attempts();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 0);
      RetryExponentialBackoff<String> retryExponentialBackoff0 = new RetryExponentialBackoff<String>((BusinessOperation<String>) null, (-1619), (-1619), predicateArray0);
      // Undeclared exception!
      try { 
        retryExponentialBackoff0.perform();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.retry.BusinessOperation.perform()\" because \"this.op\" is null
         //
         verifyException("com.iluwatar.retry.RetryExponentialBackoff", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BusinessException businessException0 = new BusinessException("w[0?<a9Ty#..");
      BusinessException[] businessExceptionArray0 = new BusinessException[2];
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessException0;
      FindCustomer findCustomer0 = new FindCustomer("8Npf", businessExceptionArray0);
      Object object0 = new Object();
      Predicate<Exception> predicate0 = Predicate.isEqual(object0);
      Predicate<Exception> predicate1 = predicate0.negate();
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate1;
      RetryExponentialBackoff<String> retryExponentialBackoff0 = new RetryExponentialBackoff<String>(findCustomer0, 4526, (-1L), predicateArray0);
      // Undeclared exception!
      try { 
        retryExponentialBackoff0.perform();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BusinessException[] businessExceptionArray0 = new BusinessException[3];
      BusinessException businessException0 = new BusinessException("");
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessExceptionArray0[0];
      businessExceptionArray0[2] = businessExceptionArray0[0];
      FindCustomer findCustomer0 = new FindCustomer("sFYB,u", businessExceptionArray0);
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Exception> predicate0 = Predicate.isEqual((Object) businessException0);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      RetryExponentialBackoff<String> retryExponentialBackoff0 = new RetryExponentialBackoff<String>(findCustomer0, 18, 18, predicateArray0);
      int int0 = retryExponentialBackoff0.attempts();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BusinessException businessException0 = new BusinessException("w[0?<a9Ty#..");
      BusinessException[] businessExceptionArray0 = new BusinessException[2];
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessException0;
      FindCustomer findCustomer0 = new FindCustomer("8Npf", businessExceptionArray0);
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 0);
      RetryExponentialBackoff<String> retryExponentialBackoff0 = new RetryExponentialBackoff<String>(findCustomer0, 4513, 4513, predicateArray0);
      try { 
        retryExponentialBackoff0.perform();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BusinessException[] businessExceptionArray0 = new BusinessException[3];
      BusinessException businessException0 = new BusinessException("sFYB,u");
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessException0;
      businessExceptionArray0[2] = businessExceptionArray0[0];
      FindCustomer findCustomer0 = new FindCustomer("sFYB,u", businessExceptionArray0);
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Exception> predicate0 = Predicate.isEqual((Object) businessException0);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicateArray0[0];
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicateArray0[1];
      RetryExponentialBackoff<String> retryExponentialBackoff0 = new RetryExponentialBackoff<String>(findCustomer0, 3, 0L, predicateArray0);
      try { 
        retryExponentialBackoff0.perform();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BusinessException businessException0 = new BusinessException("w[0?<a9Ty#..");
      BusinessException[] businessExceptionArray0 = new BusinessException[2];
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessException0;
      FindCustomer findCustomer0 = new FindCustomer("8Npf", businessExceptionArray0);
      Object object0 = new Object();
      Predicate<Exception> predicate0 = Predicate.isEqual(object0);
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate0;
      RetryExponentialBackoff<String> retryExponentialBackoff0 = new RetryExponentialBackoff<String>(findCustomer0, 4526, (-1L), predicateArray0);
      List<Exception> list0 = retryExponentialBackoff0.errors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BusinessException businessException0 = new BusinessException("com.iluwatar.retry.FindCusomer");
      BusinessException[] businessExceptionArray0 = new BusinessException[2];
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessException0;
      FindCustomer findCustomer0 = new FindCustomer("com.iluwatar.retry.FindCusomer", businessExceptionArray0);
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 2);
      RetryExponentialBackoff<String> retryExponentialBackoff0 = null;
      try {
        retryExponentialBackoff0 = new RetryExponentialBackoff<String>(findCustomer0, 4526, 4526, predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReduceOps$2ReducingSink", e);
      }
  }
}
