/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 11:54:34 GMT 2021
 */

package com.iluwatar.retry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.retry.BusinessException;
import com.iluwatar.retry.BusinessOperation;
import com.iluwatar.retry.FindCustomer;
import com.iluwatar.retry.Retry;
import com.iluwatar.retry.RetryExponentialBackoff;
import java.lang.reflect.Array;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Retry_ESTest extends Retry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 0);
      BusinessException businessException0 = new BusinessException("com.iluwatar.retry.Retry");
      BusinessException[] businessExceptionArray0 = new BusinessException[4];
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessException0;
      businessExceptionArray0[2] = businessExceptionArray0[1];
      businessExceptionArray0[3] = businessException0;
      FindCustomer findCustomer0 = new FindCustomer("com.iluwatar.retry.Retry", businessExceptionArray0);
      Retry<String> retry0 = new Retry<String>(findCustomer0, 0, 0, predicateArray0);
      try { 
        retry0.perform();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BusinessOperation<Object> businessOperation0 = (BusinessOperation<Object>) mock(BusinessOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(businessOperation0).perform();
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Exception> predicate0 = Predicate.isEqual((Object) businessOperation0);
      predicateArray0[0] = predicate0;
      RetryExponentialBackoff<Object> retryExponentialBackoff0 = new RetryExponentialBackoff<Object>(businessOperation0, 0, 0, predicateArray0);
      Retry<Object> retry0 = new Retry<Object>(retryExponentialBackoff0, 0, 1635L, predicateArray0);
      Object object0 = retry0.perform();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BusinessException[] businessExceptionArray0 = new BusinessException[3];
      BusinessException businessException0 = new BusinessException("");
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessException0;
      businessExceptionArray0[2] = businessExceptionArray0[1];
      FindCustomer findCustomer0 = new FindCustomer("", businessExceptionArray0);
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Exception> predicate0 = Predicate.isEqual((Object) findCustomer0);
      predicateArray0[0] = predicate0;
      Predicate<Exception> predicate1 = predicate0.negate();
      predicateArray0[1] = predicate1;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicateArray0[1];
      predicateArray0[4] = predicateArray0[1];
      Retry<String> retry0 = new Retry<String>(findCustomer0, 1812, 1812, predicateArray0);
      retry0.perform();
      int int0 = retry0.attempts();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 0);
      Retry<Integer> retry0 = new Retry<Integer>((BusinessOperation<Integer>) null, 2158, 2158, predicateArray0);
      // Undeclared exception!
      try { 
        retry0.perform();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.retry.BusinessOperation.perform()\" because \"this.op\" is null
         //
         verifyException("com.iluwatar.retry.Retry", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BusinessException businessException0 = new BusinessException("com.iluwatar.retry.Retry");
      BusinessException[] businessExceptionArray0 = new BusinessException[1];
      businessExceptionArray0[0] = businessException0;
      FindCustomer findCustomer0 = new FindCustomer("com.iluwatar.retry.Retry", businessExceptionArray0);
      Predicate<Exception> predicate0 = Predicate.isEqual((Object) findCustomer0);
      Predicate<Exception> predicate1 = predicate0.negate();
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate1;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      Retry<String> retry0 = new Retry<String>(findCustomer0, 1812, (-1L), predicateArray0);
      // Undeclared exception!
      try { 
        retry0.perform();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Retry<Integer> retry0 = null;
      try {
        retry0 = new Retry<Integer>((BusinessOperation<Integer>) null, (-757), (-757), (Predicate<Exception>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 0);
      BusinessException[] businessExceptionArray0 = new BusinessException[3];
      BusinessException businessException0 = new BusinessException("");
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessExceptionArray0[0];
      businessExceptionArray0[2] = businessExceptionArray0[0];
      FindCustomer findCustomer0 = new FindCustomer("", businessExceptionArray0);
      Retry<String> retry0 = new Retry<String>(findCustomer0, 2145, 2145, predicateArray0);
      try { 
        retry0.perform();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BusinessException[] businessExceptionArray0 = new BusinessException[1];
      BusinessException businessException0 = new BusinessException("");
      businessExceptionArray0[0] = businessException0;
      FindCustomer findCustomer0 = new FindCustomer("GWTlI?e", businessExceptionArray0);
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Exception> predicate0 = Predicate.isEqual((Object) businessException0);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      RetryExponentialBackoff<String> retryExponentialBackoff0 = new RetryExponentialBackoff<String>(findCustomer0, 1, 1, predicateArray0);
      Retry<String> retry0 = new Retry<String>(retryExponentialBackoff0, 1, (-3035L), predicateArray0);
      try { 
        retry0.perform();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 0);
      BusinessException[] businessExceptionArray0 = new BusinessException[3];
      BusinessException businessException0 = new BusinessException("");
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessExceptionArray0[0];
      businessExceptionArray0[2] = businessExceptionArray0[0];
      FindCustomer findCustomer0 = new FindCustomer("", businessExceptionArray0);
      Retry<String> retry0 = new Retry<String>(findCustomer0, 2145, 2145, predicateArray0);
      int int0 = retry0.attempts();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Predicate<Exception>[] predicateArray0 = (Predicate<Exception>[]) Array.newInstance(Predicate.class, 0);
      BusinessException[] businessExceptionArray0 = new BusinessException[2];
      BusinessException businessException0 = new BusinessException("XUm!X@~g24Zf");
      businessExceptionArray0[0] = businessException0;
      businessExceptionArray0[1] = businessExceptionArray0[0];
      FindCustomer findCustomer0 = new FindCustomer("XUm!X@~g24Zf", businessExceptionArray0);
      RetryExponentialBackoff<String> retryExponentialBackoff0 = new RetryExponentialBackoff<String>(findCustomer0, 1, 1000L, predicateArray0);
      Retry<String> retry0 = new Retry<String>(retryExponentialBackoff0, 2149, (-2907L), predicateArray0);
      List<Exception> list0 = retry0.errors();
      assertEquals(0, list0.size());
  }
}
