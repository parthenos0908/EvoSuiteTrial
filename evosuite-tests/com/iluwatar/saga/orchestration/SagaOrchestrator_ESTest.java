/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 12:17:17 GMT 2021
 */

package com.iluwatar.saga.orchestration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.saga.orchestration.ChapterResult;
import com.iluwatar.saga.orchestration.FlyBookingService;
import com.iluwatar.saga.orchestration.OrchestrationChapter;
import com.iluwatar.saga.orchestration.OrderService;
import com.iluwatar.saga.orchestration.Saga;
import com.iluwatar.saga.orchestration.SagaOrchestrator;
import com.iluwatar.saga.orchestration.ServiceDiscoveryService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SagaOrchestrator_ESTest extends SagaOrchestrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga saga1 = saga0.chapter((String) null);
      ServiceDiscoveryService serviceDiscoveryService0 = new ServiceDiscoveryService();
      saga1.chapter((String) null);
      OrderService orderService0 = new OrderService();
      ChapterResult<OrderService> chapterResult0 = (ChapterResult<OrderService>) mock(ChapterResult.class, new ViolatedAssumptionAnswer());
      doReturn(orderService0).when(chapterResult0).getValue();
      doReturn(true).when(chapterResult0).isSuccess();
      ChapterResult<OrderService> chapterResult1 = (ChapterResult<OrderService>) mock(ChapterResult.class, new ViolatedAssumptionAnswer());
      OrchestrationChapter<OrderService> orchestrationChapter0 = (OrchestrationChapter<OrderService>) mock(OrchestrationChapter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(orchestrationChapter0).getName();
      doReturn(chapterResult0, (ChapterResult) null).when(orchestrationChapter0).process(any(com.iluwatar.saga.orchestration.OrderService.class));
      serviceDiscoveryService0.discover(orchestrationChapter0);
      SagaOrchestrator sagaOrchestrator0 = new SagaOrchestrator(saga1, serviceDiscoveryService0);
      // Undeclared exception!
      try { 
        sagaOrchestrator0.execute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.saga.orchestration.ChapterResult.isSuccess()\" because \"processRes\" is null
         //
         verifyException("com.iluwatar.saga.orchestration.SagaOrchestrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Saga saga0 = Saga.create();
      saga0.chapter((String) null);
      ServiceDiscoveryService serviceDiscoveryService0 = new ServiceDiscoveryService();
      ChapterResult<FlyBookingService> chapterResult0 = (ChapterResult<FlyBookingService>) mock(ChapterResult.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(chapterResult0).isSuccess();
      ChapterResult<FlyBookingService> chapterResult1 = (ChapterResult<FlyBookingService>) mock(ChapterResult.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(chapterResult1).isSuccess();
      OrchestrationChapter<FlyBookingService> orchestrationChapter0 = (OrchestrationChapter<FlyBookingService>) mock(OrchestrationChapter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(orchestrationChapter0).getName();
      doReturn(chapterResult0).when(orchestrationChapter0).process(any(com.iluwatar.saga.orchestration.FlyBookingService.class));
      doReturn(chapterResult1).when(orchestrationChapter0).rollback(any(com.iluwatar.saga.orchestration.FlyBookingService.class));
      serviceDiscoveryService0.discover(orchestrationChapter0);
      SagaOrchestrator sagaOrchestrator0 = new SagaOrchestrator(saga0, serviceDiscoveryService0);
      Saga.Result saga_Result0 = sagaOrchestrator0.execute((Object) null);
      assertEquals(Saga.Result.CRASHED, saga_Result0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga saga1 = saga0.chapter("booking a Fly");
      ServiceDiscoveryService serviceDiscoveryService0 = new ServiceDiscoveryService();
      FlyBookingService flyBookingService0 = new FlyBookingService();
      ServiceDiscoveryService serviceDiscoveryService1 = serviceDiscoveryService0.discover(flyBookingService0);
      saga0.chapter("");
      SagaOrchestrator sagaOrchestrator0 = new SagaOrchestrator(saga1, serviceDiscoveryService1);
      Saga.Result saga_Result0 = sagaOrchestrator0.execute(flyBookingService0);
      assertEquals(Saga.Result.ROLLBACK, saga_Result0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga saga1 = saga0.chapter("booking a Fly");
      ServiceDiscoveryService serviceDiscoveryService0 = new ServiceDiscoveryService();
      FlyBookingService flyBookingService0 = new FlyBookingService();
      SagaOrchestrator sagaOrchestrator0 = new SagaOrchestrator(saga1, serviceDiscoveryService0);
      // Undeclared exception!
      try { 
        sagaOrchestrator0.execute(flyBookingService0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga saga1 = saga0.chapter("booking a Fly");
      ServiceDiscoveryService serviceDiscoveryService0 = new ServiceDiscoveryService();
      FlyBookingService flyBookingService0 = new FlyBookingService();
      ServiceDiscoveryService serviceDiscoveryService1 = serviceDiscoveryService0.discover(flyBookingService0);
      SagaOrchestrator sagaOrchestrator0 = new SagaOrchestrator(saga1, serviceDiscoveryService1);
      Saga.Result saga_Result0 = sagaOrchestrator0.execute(flyBookingService0);
      assertEquals(Saga.Result.FINISHED, saga_Result0);
  }
}
