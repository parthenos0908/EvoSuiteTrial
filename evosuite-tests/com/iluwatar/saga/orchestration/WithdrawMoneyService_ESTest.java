/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 12:20:37 GMT 2021
 */

package com.iluwatar.saga.orchestration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.saga.orchestration.ChapterResult;
import com.iluwatar.saga.orchestration.WithdrawMoneyService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WithdrawMoneyService_ESTest extends WithdrawMoneyService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WithdrawMoneyService withdrawMoneyService0 = new WithdrawMoneyService();
      String string0 = withdrawMoneyService0.getName();
      assertEquals("withdrawing Money", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WithdrawMoneyService withdrawMoneyService0 = new WithdrawMoneyService();
      // Undeclared exception!
      try { 
        withdrawMoneyService0.process((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WithdrawMoneyService withdrawMoneyService0 = new WithdrawMoneyService();
      ChapterResult<String> chapterResult0 = withdrawMoneyService0.process("crashed_order");
      assertEquals("withdrawing Money", withdrawMoneyService0.getName());
      assertFalse(chapterResult0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WithdrawMoneyService withdrawMoneyService0 = new WithdrawMoneyService();
      ChapterResult<String> chapterResult0 = withdrawMoneyService0.process("bad_order");
      assertEquals("withdrawing Money", withdrawMoneyService0.getName());
      assertFalse(chapterResult0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WithdrawMoneyService withdrawMoneyService0 = new WithdrawMoneyService();
      ChapterResult<String> chapterResult0 = withdrawMoneyService0.process("#j\"y70;$");
      assertTrue(chapterResult0.isSuccess());
      assertEquals("withdrawing Money", withdrawMoneyService0.getName());
  }
}
