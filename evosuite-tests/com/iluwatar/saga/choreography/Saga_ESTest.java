/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 12:07:04 GMT 2021
 */

package com.iluwatar.saga.choreography;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.saga.choreography.Saga;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Saga_ESTest extends Saga_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Saga saga0 = Saga.create();
      int int0 = saga0.forward();
      assertEquals(1, int0);
      
      boolean boolean0 = saga0.isPresent();
      assertFalse(boolean0);
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga saga1 = saga0.chapter("NH\"9w");
      saga1.chapter("NH\"9w");
      Saga saga2 = saga1.setInValue("2U");
      assertEquals(Saga.SagaResult.PROGRESS, saga2.getResult());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga saga1 = saga0.chapter("NH\"9w");
      saga1.setCurrentValue("NH\"9w");
      assertEquals(Saga.SagaResult.PROGRESS, saga1.getResult());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Saga saga0 = Saga.create();
      int int0 = saga0.back();
      assertEquals((-1), int0);
      
      boolean boolean0 = saga0.isForward();
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Saga saga0 = Saga.create();
      saga0.chapter("l#r");
      saga0.getCurrentValue();
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga saga1 = saga0.chapter("");
      Object object0 = new Object();
      Saga saga2 = saga1.setInValue(object0);
      Object object1 = saga2.getCurrentValue();
      assertEquals(Saga.SagaResult.PROGRESS, saga2.getResult());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga saga1 = saga0.chapter("NH\"9w");
      saga1.getCurrent();
      assertEquals(Saga.SagaResult.PROGRESS, saga1.getResult());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Saga saga0 = Saga.create();
      saga0.back();
      saga0.back();
      int int0 = saga0.forward();
      assertEquals((-1), int0);
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Saga saga0 = Saga.create();
      saga0.forward();
      int int0 = saga0.back();
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Saga.Chapter saga_Chapter0 = new Saga.Chapter("SUCCESS");
      boolean boolean0 = saga_Chapter0.isSuccess();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga saga1 = saga0.chapter("NH\"9w");
      Saga.ChapterResult saga_ChapterResult0 = Saga.ChapterResult.SUCCESS;
      saga0.setCurrentStatus(saga_ChapterResult0);
      Saga.Chapter saga_Chapter0 = saga1.getCurrent();
      boolean boolean0 = saga_Chapter0.isSuccess();
      assertEquals(Saga.SagaResult.PROGRESS, saga1.getResult());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Saga.Chapter saga_Chapter0 = new Saga.Chapter("ivPE^%-)/%/,jsJv");
      saga_Chapter0.setInValue("Saga{chapters=[com.iluwatar.saga.choreography.Saga$Chapter@2, com.iluwatar.saga.choreography.Saga$Chapter@3], pos=0, forward=true}");
      assertFalse(saga_Chapter0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga saga1 = saga0.chapter("G-=Hyf__2");
      Saga.ChapterResult saga_ChapterResult0 = Saga.ChapterResult.SUCCESS;
      saga1.setCurrentStatus(saga_ChapterResult0);
      boolean boolean0 = saga0.isCurrentSuccess();
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Saga saga0 = Saga.create();
      saga0.chapter("G-=Hyf__2");
      boolean boolean0 = saga0.isCurrentSuccess();
      assertFalse(boolean0);
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Saga saga0 = Saga.create();
      saga0.chapter("");
      boolean boolean0 = saga0.isPresent();
      assertTrue(boolean0);
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Saga saga0 = Saga.create();
      boolean boolean0 = saga0.isPresent();
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Saga saga0 = Saga.create();
      int int0 = saga0.back();
      assertEquals((-1), int0);
      
      boolean boolean0 = saga0.isPresent();
      assertFalse(boolean0);
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga saga1 = saga0.setInValue((Object) null);
      assertEquals(Saga.SagaResult.PROGRESS, saga1.getResult());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Saga saga0 = Saga.create();
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
      
      saga0.setFinished(true);
      saga0.getResult();
      assertEquals(Saga.SagaResult.FINISHED, saga0.getResult());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga.SagaResult saga_SagaResult0 = saga0.getResult();
      assertEquals(Saga.SagaResult.PROGRESS, saga_SagaResult0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Saga saga0 = Saga.create();
      // Undeclared exception!
      try { 
        saga0.getCurrent();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Saga saga0 = Saga.create();
      saga0.forward();
      saga0.forward();
      saga0.back();
      saga0.back();
      int int0 = saga0.back();
      assertEquals((-1), int0);
      
      int int1 = saga0.forward();
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Saga saga0 = Saga.create();
      boolean boolean0 = saga0.isForward();
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Saga saga0 = Saga.create();
      saga0.back();
      saga0.setFinished(true);
      saga0.getResult();
      assertEquals(Saga.SagaResult.ROLLBACKED, saga0.getResult());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Saga saga0 = Saga.create();
      String string0 = saga0.toString();
      assertEquals(Saga.SagaResult.PROGRESS, saga0.getResult());
      assertEquals("Saga{chapters=[], pos=0, forward=true}", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Saga saga0 = Saga.create();
      // Undeclared exception!
      try { 
        saga0.setCurrentValue("NH\"9w");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Saga saga0 = Saga.create();
      // Undeclared exception!
      try { 
        saga0.isCurrentSuccess();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Saga saga0 = Saga.create();
      Saga.ChapterResult saga_ChapterResult0 = Saga.ChapterResult.SUCCESS;
      // Undeclared exception!
      try { 
        saga0.setCurrentStatus(saga_ChapterResult0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Saga saga0 = Saga.create();
      // Undeclared exception!
      try { 
        saga0.getCurrentValue();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Saga.Chapter saga_Chapter0 = new Saga.Chapter("ivPE^%-)/%/,jsJv");
      Saga.ChapterResult saga_ChapterResult0 = Saga.ChapterResult.SUCCESS;
      saga_Chapter0.setResult(saga_ChapterResult0);
      assertEquals("ivPE^%-)/%/,jsJv", saga_Chapter0.getName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Saga.Chapter saga_Chapter0 = new Saga.Chapter("");
      String string0 = saga_Chapter0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Saga.Chapter saga_Chapter0 = new Saga.Chapter("ivPE^%-)/%/,jsJv");
      Object object0 = saga_Chapter0.getInValue();
      assertNull(object0);
  }
}
