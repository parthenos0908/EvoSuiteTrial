/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 08:08:58 GMT 2021
 */

package com.iluwatar.hexagonal.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.hexagonal.domain.LotteryNumbers;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LotteryNumbers_ESTest extends LotteryNumbers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1243);
      linkedHashSet0.add(integer0);
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      lotteryNumbers0.hashCode();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Random.setNextRandom((-936));
      // Undeclared exception!
      LotteryNumbers.createRandom();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        LotteryNumbers.create((Set<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.Collection.iterator()\" because \"c\" is null
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryNumbers lotteryNumbers1 = LotteryNumbers.create(linkedHashSet0);
      boolean boolean0 = lotteryNumbers0.equals(lotteryNumbers1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      boolean boolean0 = lotteryNumbers0.equals(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      boolean boolean0 = lotteryNumbers0.equals(lotteryNumbers0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      boolean boolean0 = lotteryNumbers0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      Set<Integer> set0 = lotteryNumbers0.getNumbers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      // Undeclared exception!
      try { 
        lotteryNumbers0.getNumbersAsString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Joiner
         //
         verifyException("com.iluwatar.hexagonal.domain.LotteryNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      String string0 = lotteryNumbers0.toString();
      assertEquals("LotteryNumbers{numbers=[]}", string0);
  }
}
