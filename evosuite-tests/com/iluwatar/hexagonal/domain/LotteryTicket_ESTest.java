/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 08:11:15 GMT 2021
 */

package com.iluwatar.hexagonal.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.hexagonal.domain.LotteryNumbers;
import com.iluwatar.hexagonal.domain.LotteryTicket;
import com.iluwatar.hexagonal.domain.LotteryTicketId;
import com.iluwatar.hexagonal.domain.PlayerDetails;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LotteryTicket_ESTest extends LotteryTicket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      String string0 = lotteryTicket0.toString();
      assertEquals("PlayerDetails{emailAddress='', bankAccountNumber='', phoneNumber=''} LotteryNumbers{numbers=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId(277);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, (PlayerDetails) null, (LotteryNumbers) null);
      PlayerDetails playerDetails0 = lotteryTicket0.getPlayerDetails();
      assertNull(playerDetails0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      PlayerDetails playerDetails0 = new PlayerDetails("", "KZM>5x~~)Q2C(", "KZM>5x~~)Q2C(");
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, (LotteryNumbers) null);
      LotteryNumbers lotteryNumbers0 = lotteryTicket0.getNumbers();
      assertNull(lotteryNumbers0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      PlayerDetails playerDetails0 = new PlayerDetails("N2Ayt=#?'[L", "", "");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      lotteryTicket0.setId((LotteryTicketId) null);
      LotteryTicketId lotteryTicketId1 = lotteryTicket0.getId();
      assertNull(lotteryTicketId1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId(0);
      PlayerDetails playerDetails0 = new PlayerDetails((String) null, (String) null, "e#");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      LotteryTicketId lotteryTicketId1 = lotteryTicket0.getId();
      assertSame(lotteryTicketId1, lotteryTicketId0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId(277);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, (PlayerDetails) null, (LotteryNumbers) null);
      LotteryTicketId lotteryTicketId1 = new LotteryTicketId((-4586));
      lotteryTicket0.setId(lotteryTicketId1);
      LotteryTicketId lotteryTicketId2 = lotteryTicket0.getId();
      assertNotSame(lotteryTicketId2, lotteryTicketId0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      LotteryTicket lotteryTicket1 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      boolean boolean0 = lotteryTicket0.equals(lotteryTicket1);
      //  // Unstable assertion: assertEquals(114, lotteryTicketId0.getId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, (PlayerDetails) null, lotteryNumbers0);
      PlayerDetails playerDetails0 = new PlayerDetails("com.iluwatar.hexagonal.domain.PlayerDetails", "com.iluwatar.hexagonal.domain.PlayerDetails", (String) null);
      LotteryTicket lotteryTicket1 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      boolean boolean0 = lotteryTicket0.equals(lotteryTicket1);
      //  // Unstable assertion: assertEquals(107, lotteryTicketId0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId(31);
      PlayerDetails playerDetails0 = new PlayerDetails("4\"[Zt&hb", "4\"[Zt&hb", "`alNg#!AF!uig0~?%");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      LotteryTicket lotteryTicket1 = new LotteryTicket(lotteryTicketId0, playerDetails0, (LotteryNumbers) null);
      boolean boolean0 = lotteryTicket1.equals(lotteryTicket0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId(31);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, (PlayerDetails) null, (LotteryNumbers) null);
      LotteryTicket lotteryTicket1 = new LotteryTicket(lotteryTicketId0, (PlayerDetails) null, (LotteryNumbers) null);
      boolean boolean0 = lotteryTicket0.equals(lotteryTicket1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      boolean boolean0 = lotteryTicket0.equals(lotteryTicketId0);
      //  // Unstable assertion: assertEquals(103, lotteryTicketId0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId(277);
      PlayerDetails playerDetails0 = new PlayerDetails("com.iluwatar.hexagonal.domain.LotteryTicket", "com.iluwatar.hexagonal.domain.LotteryTicket", "com.iluwatar.hexagonal.domain.LotteryTicket");
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, (LotteryNumbers) null);
      boolean boolean0 = lotteryTicket0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId((-1265));
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, (PlayerDetails) null, (LotteryNumbers) null);
      boolean boolean0 = lotteryTicket0.equals(lotteryTicket0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, (PlayerDetails) null, lotteryNumbers0);
      LotteryTicket lotteryTicket1 = new LotteryTicket(lotteryTicketId0, (PlayerDetails) null, (LotteryNumbers) null);
      boolean boolean0 = lotteryTicket0.equals(lotteryTicket1);
      //  // Unstable assertion: assertEquals(95, lotteryTicketId0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      PlayerDetails playerDetails0 = new PlayerDetails("com.iluwatar.hexagonal.domain.PlayerDetails", "com.iluwatar.hexagonal.domain.PlayerDetails", (String) null);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      lotteryTicket0.hashCode();
      //  // Unstable assertion: assertEquals(54, lotteryTicketId0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, (PlayerDetails) null, (LotteryNumbers) null);
      lotteryTicket0.hashCode();
      //  // Unstable assertion: assertEquals(5, lotteryTicketId0.getId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      LotteryNumbers lotteryNumbers1 = lotteryTicket0.getNumbers();
      assertSame(lotteryNumbers0, lotteryNumbers1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, (PlayerDetails) null, lotteryNumbers0);
      // Undeclared exception!
      try { 
        lotteryTicket0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.hexagonal.domain.PlayerDetails.toString()\" because \"this.playerDetails\" is null
         //
         verifyException("com.iluwatar.hexagonal.domain.LotteryTicket", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      LotteryTicketId lotteryTicketId1 = lotteryTicket0.getId();
      //  // Unstable assertion: assertEquals(2, lotteryTicketId1.getId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LotteryTicketId lotteryTicketId0 = new LotteryTicketId();
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LotteryNumbers lotteryNumbers0 = LotteryNumbers.create(linkedHashSet0);
      LotteryTicket lotteryTicket0 = new LotteryTicket(lotteryTicketId0, playerDetails0, lotteryNumbers0);
      PlayerDetails playerDetails1 = lotteryTicket0.getPlayerDetails();
      assertSame(playerDetails0, playerDetails1);
  }
}
