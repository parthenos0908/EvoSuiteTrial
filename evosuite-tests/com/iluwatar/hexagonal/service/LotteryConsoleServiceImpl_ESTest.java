/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 08:20:37 GMT 2021
 */

package com.iluwatar.hexagonal.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.hexagonal.banking.InMemoryBank;
import com.iluwatar.hexagonal.banking.WireTransfers;
import com.iluwatar.hexagonal.database.InMemoryTicketRepository;
import com.iluwatar.hexagonal.domain.LotteryService;
import com.iluwatar.hexagonal.domain.PlayerDetails;
import com.iluwatar.hexagonal.eventlog.StdOutEventLog;
import com.iluwatar.hexagonal.service.LotteryConsoleServiceImpl;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.net.ProtocolFamily;
import java.net.StandardProtocolFamily;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.charset.Charset;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LotteryConsoleServiceImpl_ESTest extends LotteryConsoleServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      Scanner scanner0 = new Scanner("Give 4 comma separated lottery numbers?");
      lotteryConsoleServiceImpl0.submitTicket((LotteryService) null, scanner0);
      assertEquals("java.util.Scanner[delimiters=\\p{javaWhitespace}+][position=22][match valid=true][need input=false][source closed=false][skipped=false][group separator=\\x{2c}][decimal separator=\\x{2e}][positive prefix=][negative prefix=\\Q-\\E][positive suffix=][negative suffix=][NaN string=\\QNaN\\E][infinity string=\\Q\u221E\\E]", scanner0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      Scanner scanner0 = new Scanner(lineNumberReader0);
      lotteryConsoleServiceImpl0.queryLotteryAccountFunds(inMemoryBank0, scanner0);
      assertEquals(10, scanner0.radix());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      InMemoryTicketRepository inMemoryTicketRepository0 = new InMemoryTicketRepository();
      StdOutEventLog stdOutEventLog0 = new StdOutEventLog();
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      LotteryService lotteryService0 = new LotteryService(inMemoryTicketRepository0, stdOutEventLog0, inMemoryBank0);
      Scanner scanner0 = new Scanner(")2K)v1o\"aq GZ,#+\"#,");
      lotteryConsoleServiceImpl0.checkTicket(lotteryService0, scanner0);
      assertEquals(10, scanner0.radix());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      Scanner scanner0 = new Scanner("S;Zq%?");
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.submitTicket((LotteryService) null, scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl((Logger) null);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.submitTicket((LotteryService) null, (Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"org.slf4j.Logger.info(String)\" because \"this.logger\" is null
         //
         verifyException("com.iluwatar.hexagonal.service.LotteryConsoleServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      InMemoryTicketRepository inMemoryTicketRepository0 = new InMemoryTicketRepository();
      StdOutEventLog stdOutEventLog0 = new StdOutEventLog();
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      LotteryService lotteryService0 = new LotteryService(inMemoryTicketRepository0, stdOutEventLog0, inMemoryBank0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-32), 2828);
      Scanner scanner0 = new Scanner(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.submitTicket(lotteryService0, scanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // arraycopy: source index -32 out of bounds for byte[3]
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      Scanner scanner0 = new Scanner("");
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.queryLotteryAccountFunds((WireTransfers) null, scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryService lotteryService0 = null;
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Scanner scanner0 = new Scanner(pipedInputStream0);
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      Scanner scanner1 = new Scanner(datagramChannel0);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.queryLotteryAccountFunds(inMemoryBank0, scanner1);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-61), (byte)53);
      Charset charset0 = Charset.defaultCharset();
      Scanner scanner0 = new Scanner(byteArrayInputStream0, charset0);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.queryLotteryAccountFunds(inMemoryBank0, scanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // arraycopy: source index -61 out of bounds for byte[6]
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Scanner scanner0 = new Scanner(pipedInputStream0);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.checkTicket((LotteryService) null, scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      Scanner scanner0 = new Scanner(datagramChannel0);
      Scanner scanner1 = scanner0.reset();
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.checkTicket((LotteryService) null, scanner1);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl((Logger) null);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.checkTicket((LotteryService) null, (Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"org.slf4j.Logger.info(String)\" because \"this.logger\" is null
         //
         verifyException("com.iluwatar.hexagonal.service.LotteryConsoleServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdOutEventLog stdOutEventLog0 = new StdOutEventLog();
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      InMemoryTicketRepository inMemoryTicketRepository0 = new InMemoryTicketRepository();
      LotteryService lotteryService0 = new LotteryService(inMemoryTicketRepository0, stdOutEventLog0, inMemoryBank0);
      Scanner scanner0 = new Scanner("Lottery ticket won! Unfortunately the bank credit transfer of %d failed.");
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      scanner0.close();
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.checkTicket(lotteryService0, scanner0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      Scanner scanner0 = new Scanner("");
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.addFundsToLotteryAccount(inMemoryBank0, scanner0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      StdOutEventLog stdOutEventLog0 = new StdOutEventLog();
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      PlayerDetails playerDetails0 = new PlayerDetails("5Z2%!", ".WN7IFMo@4y-&!Os3", "5Z2%!");
      InMemoryTicketRepository inMemoryTicketRepository0 = new InMemoryTicketRepository();
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      Scanner scanner0 = new Scanner(datagramChannel0);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.addFundsToLotteryAccount(inMemoryBank0, scanner0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")\" nf,jq1t\"V[!>xe-_", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Scanner scanner0 = new Scanner(fileChannel0);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.addFundsToLotteryAccount(inMemoryBank0, scanner0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl((Logger) null);
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.addFundsToLotteryAccount(inMemoryBank0, (Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"org.slf4j.Logger.info(String)\" because \"this.logger\" is null
         //
         verifyException("com.iluwatar.hexagonal.service.LotteryConsoleServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      Scanner scanner0 = new Scanner("DZZ_K?p$}ye+/");
      scanner0.close();
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.addFundsToLotteryAccount(inMemoryBank0, scanner0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      Scanner scanner0 = new Scanner("G^lqQ}<");
      Scanner scanner1 = scanner0.useDelimiter((Pattern) null);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.addFundsToLotteryAccount(inMemoryBank0, scanner1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern cannot be null
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-119), 44);
      Charset charset0 = Charset.defaultCharset();
      Scanner scanner0 = new Scanner(byteArrayInputStream0, charset0);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.addFundsToLotteryAccount(inMemoryBank0, scanner0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // arraycopy: source index -119 out of bounds for byte[4]
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InMemoryBank inMemoryBank0 = new InMemoryBank();
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl((Logger) null);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.queryLotteryAccountFunds(inMemoryBank0, (Scanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"org.slf4j.Logger.info(String)\" because \"this.logger\" is null
         //
         verifyException("com.iluwatar.hexagonal.service.LotteryConsoleServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      Scanner scanner0 = new Scanner("@EsB ~~+");
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.addFundsToLotteryAccount((WireTransfers) null, scanner0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~~+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      LotteryConsoleServiceImpl lotteryConsoleServiceImpl0 = new LotteryConsoleServiceImpl(logger0);
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      Scanner scanner0 = new Scanner(datagramChannel0);
      // Undeclared exception!
      try { 
        lotteryConsoleServiceImpl0.submitTicket((LotteryService) null, scanner0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }
}
