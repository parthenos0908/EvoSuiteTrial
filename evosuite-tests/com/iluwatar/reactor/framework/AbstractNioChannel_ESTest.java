/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 11:37:14 GMT 2021
 */

package com.iluwatar.reactor.framework;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.reactor.app.LoggingHandler;
import com.iluwatar.reactor.framework.ChannelHandler;
import com.iluwatar.reactor.framework.NioDatagramChannel;
import com.iluwatar.reactor.framework.NioReactor;
import com.iluwatar.reactor.framework.NioServerSocketChannel;
import java.nio.channels.SelectableChannel;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractNioChannel_ESTest extends AbstractNioChannel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LoggingHandler loggingHandler0 = new LoggingHandler();
      NioServerSocketChannel nioServerSocketChannel0 = new NioServerSocketChannel(1377, loggingHandler0);
      SelectableChannel selectableChannel0 = nioServerSocketChannel0.getJavaChannel();
      SelectionKey selectionKey0 = mock(SelectionKey.class, new ViolatedAssumptionAnswer());
      doReturn(selectableChannel0).when(selectionKey0).channel();
      // Undeclared exception!
      try { 
        nioServerSocketChannel0.flush(selectionKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.Queue.poll()\" because \"pendingWrites\" is null
         //
         verifyException("com.iluwatar.reactor.framework.AbstractNioChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          LoggingHandler loggingHandler0 = new LoggingHandler();
          NioDatagramChannel nioDatagramChannel0 = new NioDatagramChannel(0, loggingHandler0);
          nioDatagramChannel0.getInterestedOps();
          int int0 = nioDatagramChannel0.getInterestedOps();
          NioServerSocketChannel nioServerSocketChannel0 = new NioServerSocketChannel(int0, loggingHandler0);
          // Undeclared exception!
          try { 
            nioServerSocketChannel0.bind();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:1\" \"listen,resolve\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1598)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.base/java.lang.SecurityManager.checkListen(SecurityManager.java:990)
             // java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:247)
             // java.base/sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:88)
             // java.base/sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:80)
             // com.iluwatar.reactor.framework.NioServerSocketChannel.bind(NioServerSocketChannel.java:104)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:564)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
             // java.base/java.lang.Thread.run(Thread.java:832)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LoggingHandler loggingHandler0 = new LoggingHandler();
      NioDatagramChannel nioDatagramChannel0 = new NioDatagramChannel((-612), loggingHandler0);
      nioDatagramChannel0.getHandler();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LoggingHandler loggingHandler0 = new LoggingHandler();
      NioServerSocketChannel nioServerSocketChannel0 = new NioServerSocketChannel(0, loggingHandler0);
      ServerSocketChannel serverSocketChannel0 = nioServerSocketChannel0.getJavaChannel();
      SelectionKey selectionKey0 = mock(SelectionKey.class, new ViolatedAssumptionAnswer());
      doReturn(serverSocketChannel0, (SelectableChannel) null).when(selectionKey0).channel();
      // Undeclared exception!
      try { 
        nioServerSocketChannel0.write(loggingHandler0, selectionKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LoggingHandler loggingHandler0 = new LoggingHandler();
      NioServerSocketChannel nioServerSocketChannel0 = new NioServerSocketChannel(0, loggingHandler0);
      // Undeclared exception!
      try { 
        nioServerSocketChannel0.read((SelectionKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.nio.channels.SelectionKey.channel()\" because \"key\" is null
         //
         verifyException("com.iluwatar.reactor.framework.NioServerSocketChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LoggingHandler loggingHandler0 = new LoggingHandler();
      NioServerSocketChannel nioServerSocketChannel0 = new NioServerSocketChannel((-1256), loggingHandler0);
      ServerSocketChannel serverSocketChannel0 = nioServerSocketChannel0.getJavaChannel();
      SelectionKey selectionKey0 = mock(SelectionKey.class, new ViolatedAssumptionAnswer());
      doReturn(serverSocketChannel0).when(selectionKey0).channel();
      // Undeclared exception!
      try { 
        nioServerSocketChannel0.read(selectionKey0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class sun.nio.ch.ServerSocketChannelImpl cannot be cast to class java.nio.channels.SocketChannel (sun.nio.ch.ServerSocketChannelImpl and java.nio.channels.SocketChannel are in module java.base of loader 'bootstrap')
         //
         verifyException("com.iluwatar.reactor.framework.NioServerSocketChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LoggingHandler loggingHandler0 = new LoggingHandler();
      NioServerSocketChannel nioServerSocketChannel0 = new NioServerSocketChannel((-2261), loggingHandler0);
      // Undeclared exception!
      try { 
        nioServerSocketChannel0.bind();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2261
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NioDatagramChannel nioDatagramChannel0 = new NioDatagramChannel((-2261), (ChannelHandler) null);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LoggingHandler loggingHandler0 = new LoggingHandler();
      NioServerSocketChannel nioServerSocketChannel0 = new NioServerSocketChannel(3966, loggingHandler0);
      nioServerSocketChannel0.setReactor((NioReactor) null);
      assertEquals(16, nioServerSocketChannel0.getInterestedOps());
  }
}
