/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 11:42:01 GMT 2021
 */

package com.iluwatar.reactor.framework;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.reactor.app.LoggingHandler;
import com.iluwatar.reactor.framework.NioServerSocketChannel;
import com.iluwatar.reactor.framework.ThreadPoolDispatcher;
import java.nio.channels.SelectionKey;
import java.util.concurrent.RejectedExecutionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThreadPoolDispatcher_ESTest extends ThreadPoolDispatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ThreadPoolDispatcher threadPoolDispatcher0 = new ThreadPoolDispatcher(2314);
      LoggingHandler loggingHandler0 = new LoggingHandler();
      NioServerSocketChannel nioServerSocketChannel0 = new NioServerSocketChannel(1569, loggingHandler0);
      threadPoolDispatcher0.stop();
      // Undeclared exception!
      try { 
        threadPoolDispatcher0.onChannelReadEvent(nioServerSocketChannel0, (Object) null, (SelectionKey) null);
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task com.iluwatar.reactor.framework.ThreadPoolDispatcher$$Lambda$278/0x0000000800ea8040@697311e0 rejected from java.util.concurrent.ThreadPoolExecutor@a07e16f[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ThreadPoolDispatcher threadPoolDispatcher0 = null;
      try {
        threadPoolDispatcher0 = new ThreadPoolDispatcher((-560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ThreadPoolDispatcher threadPoolDispatcher0 = new ThreadPoolDispatcher(2314);
      LoggingHandler loggingHandler0 = new LoggingHandler();
      NioServerSocketChannel nioServerSocketChannel0 = new NioServerSocketChannel(1569, loggingHandler0);
      Object object0 = new Object();
      threadPoolDispatcher0.onChannelReadEvent(nioServerSocketChannel0, object0, (SelectionKey) null);
      assertEquals(16, nioServerSocketChannel0.getInterestedOps());
  }
}
