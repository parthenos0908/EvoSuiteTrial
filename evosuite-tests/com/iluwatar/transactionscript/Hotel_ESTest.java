/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 13:46:34 GMT 2021
 */

package com.iluwatar.transactionscript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.transactionscript.Hotel;
import com.iluwatar.transactionscript.HotelDaoImpl;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Hotel_ESTest extends Hotel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Hotel hotel0 = new Hotel((HotelDaoImpl) null);
      try { 
        hotel0.cancelRoomBooking(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.transactionscript.HotelDaoImpl.getById(int)\" because \"this.hotelDao\" is null
         //
         verifyException("com.iluwatar.transactionscript.Hotel", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Hotel hotel0 = new Hotel((HotelDaoImpl) null);
      try { 
        hotel0.bookRoom(266);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.transactionscript.HotelDaoImpl.getById(int)\" because \"this.hotelDao\" is null
         //
         verifyException("com.iluwatar.transactionscript.Hotel", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).getBoolean(anyString());
      doReturn(0, 0).when(resultSet0).getInt(anyString());
      doReturn((String) null).when(resultSet0).getString(anyString());
      doReturn(true).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Hotel hotel0 = new Hotel(hotelDaoImpl0);
      try { 
        hotel0.cancelRoomBooking((-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No booking for the room exists
         //
         verifyException("com.iluwatar.transactionscript.Hotel", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Hotel hotel0 = new Hotel(hotelDaoImpl0);
      try { 
        hotel0.cancelRoomBooking((-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Room number: -1 does not exist
         //
         verifyException("com.iluwatar.transactionscript.Hotel", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(resultSet0).getBoolean(anyString());
      doReturn(3772, 0).when(resultSet0).getInt(anyString());
      doReturn((String) null).when(resultSet0).getString(anyString());
      doReturn(true).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, (Connection) null).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Hotel hotel0 = new Hotel(hotelDaoImpl0);
      try { 
        hotel0.cancelRoomBooking((-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"java.sql.Connection.prepareStatement(String)\" because \"connection\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).getBoolean(anyString());
      doReturn(0, 0).when(resultSet0).getInt(anyString());
      doReturn((String) null).when(resultSet0).getString(anyString());
      doReturn(true).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, (Connection) null).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Hotel hotel0 = new Hotel(hotelDaoImpl0);
      try { 
        hotel0.bookRoom(1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"java.sql.Connection.prepareStatement(String)\" because \"connection\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Hotel hotel0 = new Hotel(hotelDaoImpl0);
      try { 
        hotel0.bookRoom((-397));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Room number: -397 does not exist
         //
         verifyException("com.iluwatar.transactionscript.Hotel", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(resultSet0).getBoolean(anyString());
      doReturn((-4921), (-4921)).when(resultSet0).getInt(anyString());
      doReturn("ID").when(resultSet0).getString(anyString());
      doReturn(true).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Hotel hotel0 = new Hotel(hotelDaoImpl0);
      try { 
        hotel0.bookRoom((-4921));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Room already booked!
         //
         verifyException("com.iluwatar.transactionscript.Hotel", e);
      }
  }
}
