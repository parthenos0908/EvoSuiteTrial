/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 13:48:55 GMT 2021
 */

package com.iluwatar.transactionscript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.transactionscript.Room;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Room room0 = new Room(396, "", 0, false);
      Room room1 = new Room(0, "", 0, false);
      room0.setId(0);
      room0.setPrice(396);
      boolean boolean0 = room0.equals(room1);
      assertEquals("Room{id=0, roomType=, price=396, booked=false}", room0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Room room0 = new Room((-476), (String) null, (-476), false);
      Room room1 = new Room((-1), (String) null, (-476), true);
      boolean boolean0 = room0.equals(room1);
      assertFalse(boolean0);
      assertEquals("Room{id=-1, roomType=null, price=-476, booked=true}", room1.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Room room0 = new Room((-1), "", 521, false);
      assertFalse(room0.isBooked());
      
      room0.setBooked(true);
      boolean boolean0 = room0.isBooked();
      assertEquals("Room{id=-1, roomType=, price=521, booked=true}", room0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Room room0 = new Room(1734, "7z'\"[4wJ4CAL>~.=>", (-977), true);
      room0.getRoomType();
      assertEquals("Room{id=1734, roomType=7z'\"[4wJ4CAL>~.=>, price=-977, booked=true}", room0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Room room0 = new Room((-1), "0?3fS W", (-1), false);
      room0.setRoomType("");
      room0.getRoomType();
      assertEquals("Room{id=-1, roomType=, price=-1, booked=false}", room0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Room room0 = new Room(1295, (String) null, 2091, false);
      int int0 = room0.getPrice();
      assertEquals(2091, int0);
      assertEquals("Room{id=1295, roomType=null, price=2091, booked=false}", room0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Room room0 = new Room(0, "U6fnWiNt", 0, false);
      room0.setPrice((-1366));
      int int0 = room0.getPrice();
      assertEquals("Room{id=0, roomType=U6fnWiNt, price=-1366, booked=false}", room0.toString());
      assertEquals((-1366), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Room room0 = new Room(0, "Pt_BZ", 0, true);
      int int0 = room0.getId();
      assertEquals(0, int0);
      assertEquals("Room{id=0, roomType=Pt_BZ, price=0, booked=true}", room0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Room room0 = new Room(1734, "7z'\"[4wJ4CAL>~.=>", (-977), true);
      assertEquals("Room{id=1734, roomType=7z'\"[4wJ4CAL>~.=>, price=-977, booked=true}", room0.toString());
      
      room0.setId((-977));
      int int0 = room0.getId();
      assertEquals((-977), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Room room0 = new Room(7, "eUYy~'CewpSJrbm7%Z", 7, true);
      room0.setRoomType((String) null);
      // Undeclared exception!
      try { 
        room0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"String.hashCode()\" because \"this.roomType\" is null
         //
         verifyException("com.iluwatar.transactionscript.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Room room0 = new Room((-476), (String) null, (-476), false);
      Room room1 = new Room((-476), (String) null, (-476), false);
      // Undeclared exception!
      try { 
        room0.equals(room1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Room room0 = new Room(1734, "7z'\"[4wJ4CAL>~.=>", (-977), true);
      room0.hashCode();
      assertEquals("Room{id=1734, roomType=7z'\"[4wJ4CAL>~.=>, price=-977, booked=true}", room0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Room room0 = new Room(1295, (String) null, 2091, false);
      room0.setRoomType("G&k9^P034-*'r!s\"Z`o");
      room0.hashCode();
      assertEquals("Room{id=1295, roomType=G&k9^P034-*'r!s\"Z`o, price=2091, booked=false}", room0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Room room0 = new Room(396, "", 0, false);
      assertEquals("Room{id=396, roomType=, price=0, booked=false}", room0.toString());
      
      Room room1 = new Room(0, "", 0, false);
      room0.setId(0);
      boolean boolean0 = room0.equals(room1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Room room0 = new Room(396, "", 0, false);
      Room room1 = new Room(0, "", 0, true);
      room0.setId(0);
      room0.setPrice(396);
      boolean boolean0 = room1.equals(room0);
      assertEquals("Room{id=0, roomType=, price=396, booked=false}", room0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Room room0 = new Room(396, "", 0, false);
      assertEquals(396, room0.getId());
      
      Room room1 = new Room(0, "", 0, true);
      room0.setId(0);
      boolean boolean0 = room0.equals(room1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Room room0 = new Room(396, "", 0, false);
      Object object0 = new Object();
      boolean boolean0 = room0.equals(object0);
      assertEquals("Room{id=396, roomType=, price=0, booked=false}", room0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Room room0 = new Room((-476), (String) null, (-476), false);
      boolean boolean0 = room0.equals((Object) null);
      assertEquals("Room{id=-476, roomType=null, price=-476, booked=false}", room0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Room room0 = new Room((-476), (String) null, (-476), false);
      boolean boolean0 = room0.equals(room0);
      assertEquals("Room{id=-476, roomType=null, price=-476, booked=false}", room0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Room room0 = new Room(396, "", 0, false);
      Room room1 = new Room(0, "", 0, true);
      boolean boolean0 = room0.equals(room1);
      assertFalse(boolean0);
      assertEquals("Room{id=396, roomType=, price=0, booked=false}", room0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Room room0 = new Room(396, "", 0, false);
      String string0 = room0.toString();
      assertEquals("Room{id=396, roomType=, price=0, booked=false}", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Room room0 = new Room(396, "", 0, false);
      int int0 = room0.getPrice();
      assertEquals(0, int0);
      assertEquals("Room{id=396, roomType=, price=0, booked=false}", room0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Room room0 = new Room(1734, "7z'\"[4wJ4CAL>~.=>", (-977), true);
      int int0 = room0.getId();
      assertEquals("Room{id=1734, roomType=7z'\"[4wJ4CAL>~.=>, price=-977, booked=true}", room0.toString());
      assertEquals(1734, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Room room0 = new Room(0, "Pt_BZ", 0, false);
      boolean boolean0 = room0.isBooked();
      assertEquals("Room{id=0, roomType=Pt_BZ, price=0, booked=false}", room0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Room room0 = new Room((-476), (String) null, (-476), false);
      room0.getRoomType();
      assertEquals("Room{id=-476, roomType=null, price=-476, booked=false}", room0.toString());
  }
}
