/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 13:47:45 GMT 2021
 */

package com.iluwatar.transactionscript;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.transactionscript.HotelDaoImpl;
import com.iluwatar.transactionscript.Room;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Optional;
import java.util.stream.Stream;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HotelDaoImpl_ESTest extends HotelDaoImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(preparedStatement0).executeUpdate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Room room0 = new Room(471, "com.iluwatar.transactionscript.Room", (-1623), true);
      Boolean boolean0 = hotelDaoImpl0.delete(room0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-2278)).when(preparedStatement0).executeUpdate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("PRCE").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Room room0 = new Room((-1), "PRCE", (-1), false);
      Boolean boolean0 = hotelDaoImpl0.update(room0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl((DataSource) null);
      try { 
        hotelDaoImpl0.getAll();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"javax.sql.DataSource.getConnection()\" because \"this.dataSource\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl((DataSource) null);
      try { 
        hotelDaoImpl0.add((Room) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.transactionscript.Room.getId()\" because \"room\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).getBoolean(anyString());
      doReturn(0, 0).when(resultSet0).getInt(anyString());
      doReturn((String) null).when(resultSet0).getString(anyString());
      doReturn(true).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Optional<Room> optional0 = hotelDaoImpl0.getById(12);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(preparedStatement0).executeUpdate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("K?CV@_;Cc").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Room room0 = new Room(10, "K?CV@_;Cc", 10, false);
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Boolean boolean0 = hotelDaoImpl0.delete(room0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-225)).when(preparedStatement0).executeUpdate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("com.iluwatar.transactionscript.HotelDaoImpl$1").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Room room0 = new Room((-225), "com.iluwatar.transactionscript.HotelDaoImpl$1", (-225), true);
      Boolean boolean0 = hotelDaoImpl0.delete(room0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      try { 
        hotelDaoImpl0.delete((Room) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"java.sql.Connection.prepareStatement(String)\" because \"connection\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("com.iluwatar.transactionscript.HotelDaoImpl$1").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      try { 
        hotelDaoImpl0.delete((Room) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"com.iluwatar.transactionscript.Room.getId()\" because \"room\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      try { 
        hotelDaoImpl0.delete((Room) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"com.iluwatar.transactionscript.Room.getId()\" because \"room\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(preparedStatement0).executeUpdate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("K?CV@_;Cc").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Room room0 = new Room(10, "K?CV@_;Cc", 10, false);
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Boolean boolean0 = hotelDaoImpl0.update(room0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(preparedStatement0).executeUpdate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("com.iluwatar.transactionscript.HotelDaoImpl$1").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Room room0 = new Room((-4328), "com.iluwatar.transactionscript.HotelDaoImpl$1", (-4328), false);
      Boolean boolean0 = hotelDaoImpl0.update(room0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      try { 
        hotelDaoImpl0.update((Room) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"java.sql.Connection.prepareStatement(String)\" because \"connection\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("4&8izy9S").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      try { 
        hotelDaoImpl0.update((Room) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"com.iluwatar.transactionscript.Room.getRoomType()\" because \"room\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      try { 
        hotelDaoImpl0.update((Room) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"com.iluwatar.transactionscript.Room.getRoomType()\" because \"room\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, (Connection) null).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Room room0 = new Room((-794), "", (-794), false);
      try { 
        hotelDaoImpl0.add(room0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"java.sql.Connection.prepareStatement(String)\" because \"connection\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection1).toString();
      doReturn((PreparedStatement) null).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, connection1).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Room room0 = new Room((-794), "", (-794), false);
      try { 
        hotelDaoImpl0.add(room0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"java.sql.PreparedStatement.setInt(int, int)\" because \"statement\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, (Connection) null).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Room room0 = new Room(12, "", 12, true);
      try { 
        hotelDaoImpl0.add(room0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"java.sql.Connection.prepareStatement(String)\" because \"connection\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      try { 
        hotelDaoImpl0.getById(3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"java.sql.Connection.prepareStatement(String)\" because \"connection\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      try { 
        hotelDaoImpl0.getById(12);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"java.sql.ResultSet.next()\" because \"resultSet\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      try { 
        hotelDaoImpl0.getById(12);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot invoke \"java.sql.PreparedStatement.setInt(int, int)\" because \"statement\" is null
         //
         verifyException("com.iluwatar.transactionscript.HotelDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).getBoolean(anyString());
      doReturn(0, 0).when(resultSet0).getInt(anyString());
      doReturn((String) null).when(resultSet0).getString(anyString());
      doReturn(true).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Room room0 = new Room(14, "", 14, false);
      Boolean boolean0 = hotelDaoImpl0.add(room0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("DELETE FROM ROOMS WHERE ID = ?").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Stream<Room> stream0 = hotelDaoImpl0.getAll();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      HotelDaoImpl hotelDaoImpl0 = new HotelDaoImpl(dataSource0);
      Optional<Room> optional0 = hotelDaoImpl0.getById(12);
      assertNotNull(optional0);
  }
}
