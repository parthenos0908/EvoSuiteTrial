/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 03:57:28 GMT 2021
 */

package com.iluwatar.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.converter.Converter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Converter_ESTest extends Converter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Converter<Object, Object> converter0 = new Converter<Object, Object>(function0, unaryOperator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) function0);
      List<Object> list0 = converter0.createFromEntities(linkedList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Converter<String, String> converter0 = new Converter<String, String>(function0, function0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = converter0.createFromDtos(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-2164));
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Integer, Integer> function2 = function0.andThen((Function<? super Integer, ? extends Integer>) function1);
      Converter<Integer, Integer> converter0 = new Converter<Integer, Integer>(function2, function2);
      Integer integer1 = converter0.convertFromEntity(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-2164));
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Integer, Integer> function2 = function0.andThen((Function<? super Integer, ? extends Integer>) function1);
      Converter<Integer, Integer> converter0 = new Converter<Integer, Integer>(function2, function2);
      Integer integer1 = converter0.convertFromDto(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Converter<String, String> converter0 = new Converter<String, String>(function0, function0);
      // Undeclared exception!
      try { 
        converter0.createFromEntities((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.Collection.stream()\" because \"entities\" is null
         //
         verifyException("com.iluwatar.converter.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter<Object, Object> converter0 = new Converter<Object, Object>((Function<Object, Object>) null, (Function<Object, Object>) null);
      // Undeclared exception!
      try { 
        converter0.convertFromEntity((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.function.Function.apply(Object)\" because \"this.fromEntity\" is null
         //
         verifyException("com.iluwatar.converter.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Converter<Object, Object> converter0 = new Converter<Object, Object>((Function<Object, Object>) null, (Function<Object, Object>) null);
      // Undeclared exception!
      try { 
        converter0.convertFromDto(function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.function.Function.apply(Object)\" because \"this.fromDto\" is null
         //
         verifyException("com.iluwatar.converter.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Converter<Object, Object> converter0 = new Converter<Object, Object>(unaryOperator0, unaryOperator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = converter0.createFromEntities(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Converter<Object, Object> converter0 = new Converter<Object, Object>(unaryOperator0, unaryOperator0);
      Object object0 = new Object();
      Object object1 = converter0.convertFromEntity(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Converter<String, String> converter0 = new Converter<String, String>(function0, function0);
      String string0 = converter0.convertFromDto("e$ FL");
      assertEquals("e$ FL", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Converter<String, String> converter0 = new Converter<String, String>(function0, function0);
      // Undeclared exception!
      try { 
        converter0.createFromDtos((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.Collection.stream()\" because \"dtos\" is null
         //
         verifyException("com.iluwatar.converter.Converter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Function<Integer, Integer> function0 = Function.identity();
      Converter<Integer, Integer> converter0 = new Converter<Integer, Integer>(function0, function0);
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      List<Integer> list0 = converter0.createFromDtos(linkedList0);
      assertFalse(list0.isEmpty());
  }
}
