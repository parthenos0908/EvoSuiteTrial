/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 03:58:37 GMT 2021
 */

package com.iluwatar.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import com.iluwatar.converter.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      User user0 = new User("r_3", "", false, "");
      boolean boolean0 = user0.isActive();
      assertEquals("User{firstName='r_3', lastName='', isActive=false, userId=''}", user0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      User user0 = new User((String) null, "", false, (String) null);
      user0.getUserId();
      assertEquals("User{firstName='null', lastName='', isActive=false, userId='null'}", user0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      User user0 = new User("", "com.iluwatar.converter.User", false, "KMW}&U&<");
      user0.getUserId();
      assertEquals("User{firstName='', lastName='com.iluwatar.converter.User', isActive=false, userId='KMW}&U&<'}", user0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = new User((String) null, (String) null, true, (String) null);
      user0.getLastName();
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User user0 = new User("", "|", true, "");
      user0.getLastName();
      assertEquals("User{firstName='', lastName='|', isActive=true, userId=''}", user0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = new User((String) null, (String) null, true, (String) null);
      user0.getFirstName();
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User user0 = new User("com.iluwatar.converter.User", (String) null, false, "com.iluwatar.converter.User");
      user0.getFirstName();
      assertEquals("User{firstName='com.iluwatar.converter.User', lastName='null', isActive=false, userId='com.iluwatar.converter.User'}", user0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      User user0 = new User("", "", true, "");
      User user1 = new User("", "", true, "User{firstName='', lastName='', isActive=true, userId=''}");
      boolean boolean0 = user1.equals(user0);
      assertEquals("User{firstName='', lastName='', isActive=true, userId='User{firstName='', lastName='', isActive=true, userId=''}'}", user1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      User user0 = new User("", "", false, "");
      User user1 = new User("", "com.iluwatar.converter.User", false, "KMW}&U&<");
      boolean boolean0 = user0.equals(user1);
      assertEquals("User{firstName='', lastName='com.iluwatar.converter.User', isActive=false, userId='KMW}&U&<'}", user1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = new User("r_3", "", false, "");
      User user1 = new User("", "", false, "User{firstName='', lastName='', isActive=true, userId=''}");
      boolean boolean0 = user0.equals(user1);
      assertFalse(boolean0);
      assertEquals("User{firstName='r_3', lastName='', isActive=false, userId=''}", user0.toString());
      assertEquals("User{firstName='', lastName='', isActive=false, userId='User{firstName='', lastName='', isActive=true, userId=''}'}", user1.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User user0 = new User("", "", true, "");
      User user1 = new User("", "", false, "");
      boolean boolean0 = user0.equals(user1);
      assertFalse(boolean0);
      assertFalse(user1.isActive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User user0 = new User((String) null, (String) null, true, (String) null);
      User user1 = new User((String) null, (String) null, true, (String) null);
      boolean boolean0 = user0.equals(user1);
      assertTrue(boolean0);
      assertTrue(user1.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      User user0 = new User((String) null, (String) null, true, (String) null);
      boolean boolean0 = user0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = new User((String) null, (String) null, true, (String) null);
      boolean boolean0 = user0.equals(user0);
      assertTrue(boolean0);
      assertEquals("User{firstName='null', lastName='null', isActive=true, userId='null'}", user0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      User user0 = new User("", "", true, "");
      boolean boolean0 = user0.equals("");
      assertFalse(boolean0);
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      User user0 = new User("", "", true, "");
      user0.getLastName();
      assertEquals("User{firstName='', lastName='', isActive=true, userId=''}", user0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      User user0 = new User("", "", true, "");
      boolean boolean0 = user0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      User user0 = new User("", "", true, "");
      user0.getFirstName();
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      User user0 = new User("", "", true, "");
      user0.hashCode();
      assertEquals("User{firstName='', lastName='', isActive=true, userId=''}", user0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      User user0 = new User("P", "P", false, "P");
      String string0 = user0.toString();
      assertEquals("User{firstName='P', lastName='P', isActive=false, userId='P'}", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      User user0 = new User("", "", false, "");
      user0.getUserId();
      assertFalse(user0.isActive());
  }
}
