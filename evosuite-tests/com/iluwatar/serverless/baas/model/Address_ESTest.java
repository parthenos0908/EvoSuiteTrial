/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 12:30:31 GMT 2021
 */

package com.iluwatar.serverless.baas.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.iluwatar.serverless.baas.model.Address;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Address_ESTest extends Address_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Address address0 = new Address();
      address0.setZipCode(",>G");
      String string0 = address0.getZipCode();
      assertEquals(",>G", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Address address0 = new Address();
      address0.setZipCode("");
      String string0 = address0.getZipCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Address address0 = new Address();
      address0.setState(",>G");
      String string0 = address0.getState();
      assertEquals(",>G", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Address address0 = new Address();
      address0.setState("");
      String string0 = address0.getState();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Address address0 = new Address();
      address0.setCity(",>G");
      String string0 = address0.getCity();
      assertEquals(",>G", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Address address0 = new Address();
      address0.setCity("");
      String string0 = address0.getCity();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddressLineTwo("'mj");
      String string0 = address0.getAddressLineTwo();
      assertEquals("'mj", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddressLineTwo("");
      String string0 = address0.getAddressLineTwo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddressLineOne("8b7JvX!u&p]W=q)");
      String string0 = address0.getAddressLineOne();
      assertEquals("8b7JvX!u&p]W=q)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddressLineOne("");
      String string0 = address0.getAddressLineOne();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Address address0 = new Address();
      address0.setZipCode(",>G");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Address address0 = new Address();
      address0.setState(",>G");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Address address0 = new Address();
      address0.setCity("k");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddressLineTwo("'mj");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddressLineOne("'mj");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Address address0 = new Address();
      address0.setCity("S~");
      Address address1 = new Address();
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address();
      assertTrue(address1.equals((Object)address0));
      
      address1.setAddressLineTwo(",>G");
      boolean boolean0 = address0.equals(address1);
      assertFalse(address1.equals((Object)address0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddressLineOne("'mj");
      Address address1 = new Address();
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Address address0 = new Address();
      boolean boolean0 = address0.equals(",>G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Address address0 = new Address();
      boolean boolean0 = address0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Address address0 = new Address();
      boolean boolean0 = address0.equals(address0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address();
      boolean boolean0 = address0.equals(address1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Address address0 = new Address();
      String string0 = address0.getAddressLineOne();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Address address0 = new Address();
      String string0 = address0.getCity();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Address address0 = new Address();
      String string0 = address0.getAddressLineTwo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Address address0 = new Address();
      String string0 = address0.getState();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Address address0 = new Address();
      address0.setState(",>G");
      Address address1 = new Address();
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Address address0 = new Address();
      String string0 = address0.getZipCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Address address0 = new Address();
      String string0 = address0.toString();
      assertEquals("Address{addressLineOne='null', addressLineTwo='null', city='null', state='null', zipCode='null'}", string0);
  }
}
