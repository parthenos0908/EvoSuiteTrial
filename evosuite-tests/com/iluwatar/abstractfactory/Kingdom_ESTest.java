/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 02:19:51 GMT 2021
 */

package com.iluwatar.abstractfactory;

import org.junit.Test;
import static org.junit.Assert.*;
import com.iluwatar.abstractfactory.Army;
import com.iluwatar.abstractfactory.Castle;
import com.iluwatar.abstractfactory.ElfCastle;
import com.iluwatar.abstractfactory.ElfKing;
import com.iluwatar.abstractfactory.King;
import com.iluwatar.abstractfactory.Kingdom;
import com.iluwatar.abstractfactory.KingdomFactory;
import com.iluwatar.abstractfactory.OrcArmy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Kingdom_ESTest extends Kingdom_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Kingdom kingdom0 = new Kingdom();
      ElfKing elfKing0 = new ElfKing();
      kingdom0.setKing(elfKing0);
      King king0 = kingdom0.getKing();
      assertSame(king0, elfKing0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Kingdom kingdom0 = new Kingdom();
      OrcArmy orcArmy0 = new OrcArmy();
      kingdom0.setArmy(orcArmy0);
      Army army0 = kingdom0.getArmy();
      assertEquals("This is the Orc Army!", army0.getDescription());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Kingdom.FactoryMaker.KingdomType kingdom_FactoryMaker_KingdomType0 = Kingdom.FactoryMaker.KingdomType.ORC;
      KingdomFactory kingdomFactory0 = Kingdom.FactoryMaker.makeFactory(kingdom_FactoryMaker_KingdomType0);
      assertNotNull(kingdomFactory0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Kingdom.FactoryMaker.KingdomType kingdom_FactoryMaker_KingdomType0 = Kingdom.FactoryMaker.KingdomType.ELF;
      KingdomFactory kingdomFactory0 = Kingdom.FactoryMaker.makeFactory(kingdom_FactoryMaker_KingdomType0);
      assertNotNull(kingdomFactory0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Kingdom kingdom0 = new Kingdom();
      King king0 = kingdom0.getKing();
      assertNull(king0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Kingdom kingdom0 = new Kingdom();
      Army army0 = kingdom0.getArmy();
      assertNull(army0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Kingdom kingdom0 = new Kingdom();
      ElfCastle elfCastle0 = new ElfCastle();
      kingdom0.setCastle(elfCastle0);
      Castle castle0 = kingdom0.getCastle();
      assertSame(castle0, elfCastle0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Kingdom kingdom0 = new Kingdom();
      Castle castle0 = kingdom0.getCastle();
      assertNull(castle0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Kingdom.FactoryMaker kingdom_FactoryMaker0 = new Kingdom.FactoryMaker();
  }
}
