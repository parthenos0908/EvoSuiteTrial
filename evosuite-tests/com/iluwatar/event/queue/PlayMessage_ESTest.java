/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 05:05:47 GMT 2021
 */

package com.iluwatar.event.queue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.iluwatar.event.queue.PlayMessage;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PlayMessage_ESTest extends PlayMessage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      AudioFormat audioFormat0 = new AudioFormat((-2059.8F), 0, 6379, true, false);
      AudioInputStream audioInputStream0 = new AudioInputStream(sequenceInputStream0, audioFormat0, 0);
      PlayMessage playMessage0 = new PlayMessage(audioInputStream0, 0.0F);
      float float0 = playMessage0.getVolume();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      AudioFormat audioFormat0 = new AudioFormat((-2059.8F), 0, 6379, true, false);
      AudioInputStream audioInputStream0 = new AudioInputStream(sequenceInputStream0, audioFormat0, 0);
      PlayMessage playMessage0 = new PlayMessage(audioInputStream0, 0.0F);
      playMessage0.setVolume(151.58243F);
      float float0 = playMessage0.getVolume();
      assertEquals(151.58243F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      AudioFormat audioFormat0 = new AudioFormat((-2059.8F), 0, 6379, true, false);
      AudioInputStream audioInputStream0 = new AudioInputStream(sequenceInputStream0, audioFormat0, 0);
      PlayMessage playMessage0 = new PlayMessage(audioInputStream0, 0.0F);
      playMessage0.getStream();
      assertEquals(0.0F, playMessage0.getVolume(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PlayMessage playMessage0 = new PlayMessage((AudioInputStream) null, (-390.0F));
      playMessage0.getStream();
      assertEquals((-390.0F), playMessage0.getVolume(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PlayMessage playMessage0 = new PlayMessage((AudioInputStream) null, (-390.0F));
      float float0 = playMessage0.getVolume();
      assertEquals((-390.0F), float0, 0.01F);
  }
}
