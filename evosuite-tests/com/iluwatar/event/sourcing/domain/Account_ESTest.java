/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 05:08:05 GMT 2021
 */

package com.iluwatar.event.sourcing.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.event.sourcing.domain.Account;
import com.iluwatar.event.sourcing.event.AccountCreateEvent;
import com.iluwatar.event.sourcing.event.MoneyDepositEvent;
import com.iluwatar.event.sourcing.event.MoneyTransferEvent;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Account_ESTest extends Account_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Account account0 = new Account((-466), (String) null);
      account0.getOwner();
      assertEquals("Account{accountNo=-466, owner='null', money=0}", account0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Account account0 = new Account((-1680), "");
      account0.getOwner();
      assertEquals("Account{accountNo=-1680, owner='', money=0}", account0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Account account0 = new Account((-1484), "Insufficient Mccount BalancA");
      account0.setMoney((BigDecimal) null);
      account0.getMoney();
      assertEquals((-1484), account0.getAccountNo());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Account account0 = new Account((-2918), "Insufficient Account Balance");
      BigDecimal bigDecimal0 = new BigDecimal((-2918));
      MoneyTransferEvent moneyTransferEvent0 = new MoneyTransferEvent((-1457L), 1L, bigDecimal0, (-2918), 0);
      account0.handleTransferFromEvent(moneyTransferEvent0);
      account0.getMoney();
      assertEquals("Account{accountNo=-2918, owner='Insufficient Account Balance', money=2918}", account0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Account account0 = new Account((-466), (String) null);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-466));
      MoneyTransferEvent moneyTransferEvent0 = new MoneyTransferEvent((-2853L), (-1346), bigDecimal0, 0, (-466));
      account0.handleTransferToEvent(moneyTransferEvent0);
      account0.getMoney();
      assertEquals("Account{accountNo=-466, owner='null', money=-466}", account0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Account account0 = new Account(1, "Insufficient Account Balance");
      BigDecimal bigDecimal0 = new BigDecimal((-370));
      MoneyTransferEvent moneyTransferEvent0 = new MoneyTransferEvent(1, 0L, bigDecimal0, 0, 0);
      account0.handleTransferToEvent(moneyTransferEvent0);
      account0.getMoney();
      assertEquals("Account{accountNo=1, owner='Insufficient Account Balance', money=-370}", account0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Account account0 = new Account(0, "");
      int int0 = account0.getAccountNo();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Account account0 = new Account((-466), (String) null);
      int int0 = account0.getAccountNo();
      assertEquals((-466), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Account account0 = new Account(0, "");
      Account account1 = account0.copy();
      assertNotSame(account1, account0);
      assertEquals("Account{accountNo=0, owner='', money=0}", account1.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Account account0 = new Account((-466), (String) null);
      Account account1 = account0.copy();
      assertNotSame(account1, account0);
      assertEquals((-466), account0.getAccountNo());
      assertEquals((-466), account1.getAccountNo());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Account account0 = new Account(1, "");
      // Undeclared exception!
      try { 
        account0.handleTransferToEvent((MoneyTransferEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.event.sourcing.event.MoneyTransferEvent.getMoney()\" because \"moneyTransferEvent\" is null
         //
         verifyException("com.iluwatar.event.sourcing.domain.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Account account0 = new Account(86, "?S$14");
      BigDecimal bigDecimal0 = new BigDecimal(2158);
      MoneyTransferEvent moneyTransferEvent0 = new MoneyTransferEvent(0L, 0L, bigDecimal0, (-3188), (-3188));
      // Undeclared exception!
      try { 
        account0.handleTransferFromEvent(moneyTransferEvent0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Insufficient Account Balance
         //
         verifyException("com.iluwatar.event.sourcing.domain.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Account account0 = new Account((-2307), "l7+r8%");
      // Undeclared exception!
      try { 
        account0.handleTransferFromEvent((MoneyTransferEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.event.sourcing.event.MoneyTransferEvent.getMoney()\" because \"moneyTransferEvent\" is null
         //
         verifyException("com.iluwatar.event.sourcing.domain.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Account account0 = new Account(463, "3$u,=n/s");
      // Undeclared exception!
      try { 
        account0.handleEvent((MoneyDepositEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.event.sourcing.event.MoneyDepositEvent.getMoney()\" because \"moneyDepositEvent\" is null
         //
         verifyException("com.iluwatar.event.sourcing.domain.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Account account0 = new Account((-466), (String) null);
      String string0 = account0.toString();
      assertEquals("Account{accountNo=-466, owner='null', money=0}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Account account0 = new Account(86, "?S$14");
      int int0 = account0.getAccountNo();
      assertEquals(86, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Account account0 = new Account((-466), (String) null);
      account0.getMoney();
      assertEquals((-466), account0.getAccountNo());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Account account0 = new Account(2005, "Khv+AKfK;");
      AccountCreateEvent accountCreateEvent0 = new AccountCreateEvent(2005, 2005, 2005, "Khv+AKfK;");
      accountCreateEvent0.setRealTime(false);
      account0.handleEvent(accountCreateEvent0);
      assertEquals(2005, account0.getAccountNo());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Account account0 = new Account(0, "");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      MoneyTransferEvent moneyTransferEvent0 = new MoneyTransferEvent(2957L, 249L, bigDecimal0, 0, 0);
      moneyTransferEvent0.setRealTime(false);
      account0.handleTransferFromEvent(moneyTransferEvent0);
      assertEquals(0, account0.getAccountNo());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Account account0 = new Account((-466), (String) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MoneyDepositEvent moneyDepositEvent0 = new MoneyDepositEvent(18L, 2893L, (-466), bigDecimal0);
      moneyDepositEvent0.setRealTime(false);
      account0.handleEvent(moneyDepositEvent0);
      assertEquals((-466), account0.getAccountNo());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Account account0 = new Account(1, "Insufficient Account Balance");
      account0.getOwner();
      assertEquals(1, account0.getAccountNo());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Account account0 = new Account(2005, "Khv+AKfK;");
      AccountCreateEvent accountCreateEvent0 = new AccountCreateEvent(2005, 2005, 2005, "Khv+AKfK;");
      account0.handleEvent(accountCreateEvent0);
      assertEquals(2005, account0.getAccountNo());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Account account0 = new Account(2005, "Khv+AKfK;");
      Account account1 = account0.copy();
      assertEquals("Account{accountNo=2005, owner='Khv+AKfK;', money=0}", account1.toString());
      assertNotSame(account1, account0);
      assertEquals("Account{accountNo=2005, owner='Khv+AKfK;', money=0}", account0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Account account0 = new Account((-1352), "");
      // Undeclared exception!
      try { 
        account0.handleEvent((AccountCreateEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.event.sourcing.event.AccountCreateEvent.isRealTime()\" because \"accountCreateEvent\" is null
         //
         verifyException("com.iluwatar.event.sourcing.domain.Account", e);
      }
  }
}
