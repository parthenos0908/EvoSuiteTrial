/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 05:09:19 GMT 2021
 */

package com.iluwatar.event.sourcing.event;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.event.sourcing.event.AccountCreateEvent;
import com.iluwatar.event.sourcing.event.MoneyDepositEvent;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DomainEvent_ESTest extends DomainEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MoneyDepositEvent moneyDepositEvent0 = new MoneyDepositEvent(0L, 0L, (-690), bigDecimal0);
      // Undeclared exception!
      try { 
        moneyDepositEvent0.process();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Account not found
         //
         verifyException("com.iluwatar.event.sourcing.event.MoneyDepositEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AccountCreateEvent accountCreateEvent0 = new AccountCreateEvent(136L, 1L, 4306, "");
      boolean boolean0 = accountCreateEvent0.isRealTime();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AccountCreateEvent accountCreateEvent0 = new AccountCreateEvent(136L, (-4L), 4306, "");
      accountCreateEvent0.setRealTime(false);
      boolean boolean0 = accountCreateEvent0.isRealTime();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TWO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      MoneyDepositEvent moneyDepositEvent0 = new MoneyDepositEvent(0L, 0L, (-962), bigDecimal0);
      long long0 = moneyDepositEvent0.getSequenceId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AccountCreateEvent accountCreateEvent0 = new AccountCreateEvent(136L, 1L, 4306, "");
      long long0 = accountCreateEvent0.getCreatedTime();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AccountCreateEvent accountCreateEvent0 = new AccountCreateEvent(0L, 0L, 0, "PF&r%w");
      // Undeclared exception!
      try { 
        accountCreateEvent0.process();
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Account already exists
         //
         verifyException("com.iluwatar.event.sourcing.event.AccountCreateEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AccountCreateEvent accountCreateEvent0 = new AccountCreateEvent(0L, 0L, 1864, "U,L4,ZIHK#s$6");
      accountCreateEvent0.getCreatedTime();
      assertTrue(accountCreateEvent0.isRealTime());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      MoneyDepositEvent moneyDepositEvent0 = new MoneyDepositEvent(255L, (-806), (-806), bigDecimal0);
      long long0 = moneyDepositEvent0.getSequenceId();
      assertEquals(255L, long0);
      assertEquals((-806L), moneyDepositEvent0.getCreatedTime());
      assertTrue(moneyDepositEvent0.isRealTime());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AccountCreateEvent accountCreateEvent0 = new AccountCreateEvent(719, 719, 719, ",Cdq<*N:*}");
      accountCreateEvent0.getEventClassName();
      assertEquals(719L, accountCreateEvent0.getSequenceId());
      assertTrue(accountCreateEvent0.isRealTime());
      assertEquals(719L, accountCreateEvent0.getCreatedTime());
  }
}
