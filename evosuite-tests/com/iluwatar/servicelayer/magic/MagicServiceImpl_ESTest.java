/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 12:36:33 GMT 2021
 */

package com.iluwatar.servicelayer.magic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.servicelayer.magic.MagicServiceImpl;
import com.iluwatar.servicelayer.spell.Spell;
import com.iluwatar.servicelayer.spell.SpellDao;
import com.iluwatar.servicelayer.spellbook.Spellbook;
import com.iluwatar.servicelayer.spellbook.SpellbookDao;
import com.iluwatar.servicelayer.wizard.Wizard;
import com.iluwatar.servicelayer.wizard.WizardDao;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MagicServiceImpl_ESTest extends MagicServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      Spellbook spellbook0 = new Spellbook();
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      doReturn(spellbook0).when(spellbookDao0).findByName(anyString());
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      List<Wizard> list0 = magicServiceImpl0.findWizardsWithSpellbook("<I/Isf,82EQMwG");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      Spellbook spellbook0 = new Spellbook();
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      doReturn(spellbook0).when(spellbookDao0).findByName(anyString());
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      Wizard wizard0 = new Wizard("6RmE%@2XnWYj/");
      wizard0.addSpellbook(spellbook0);
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      List<Wizard> list0 = magicServiceImpl0.findWizardsWithSpellbook("<I/Isf,82EQMwG");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      Spell spell0 = new Spell();
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      doReturn(spell0).when(spellDao0).findByName(anyString());
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      Spellbook spellbook0 = new Spellbook((String) null);
      spell0.setSpellbook(spellbook0);
      List<Wizard> list0 = magicServiceImpl0.findWizardsWithSpell("AkiQS!pwsRi<8B>@{S");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      Spellbook spellbook0 = new Spellbook();
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      Spell spell0 = new Spell();
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      doReturn(spell0).when(spellDao0).findByName(anyString());
      Wizard wizard0 = new Wizard("6RmE%@2XnWYj/");
      wizard0.addSpellbook(spellbook0);
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      spell0.setSpellbook(spellbook0);
      List<Wizard> list0 = magicServiceImpl0.findWizardsWithSpell("");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      doReturn((List<Wizard>) null).when(wizardDao0).findAll();
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      List<Wizard> list0 = magicServiceImpl0.findAllWizards();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Wizard> linkedList0 = new LinkedList<Wizard>();
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      WizardDao wizardDao1 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(wizardDao1).findAll();
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao1, spellbookDao0, spellDao0);
      List<Wizard> list0 = magicServiceImpl0.findAllWizards();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Wizard> linkedList0 = new LinkedList<Wizard>();
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(wizardDao0).findAll();
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      Wizard wizard0 = new Wizard("6RmE%@2XnWYj/");
      linkedList0.add(wizard0);
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      List<Wizard> list0 = magicServiceImpl0.findAllWizards();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      doReturn((List<Spell>) null).when(spellDao0).findAll();
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      List<Spell> list0 = magicServiceImpl0.findAllSpells();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      LinkedList<Spell> linkedList0 = new LinkedList<Spell>();
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(spellDao0).findAll();
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      List<Spell> list0 = magicServiceImpl0.findAllSpells();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      LinkedList<Spell> linkedList0 = new LinkedList<Spell>();
      Spell spell0 = new Spell();
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(spellDao0).findAll();
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      linkedList0.add(spell0);
      List<Spell> list0 = magicServiceImpl0.findAllSpells();
      assertTrue(list0.contains(spell0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(spellbookDao0).findAll();
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      List<Spellbook> list0 = magicServiceImpl0.findAllSpellbooks();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      LinkedList<Spellbook> linkedList0 = new LinkedList<Spellbook>();
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(spellbookDao0).findAll();
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      List<Spellbook> list0 = magicServiceImpl0.findAllSpellbooks();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WizardDao wizardDao0 = mock(WizardDao.class, new ViolatedAssumptionAnswer());
      LinkedList<Spellbook> linkedList0 = new LinkedList<Spellbook>();
      SpellbookDao spellbookDao0 = mock(SpellbookDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(spellbookDao0).findAll();
      linkedList0.add((Spellbook) null);
      SpellDao spellDao0 = mock(SpellDao.class, new ViolatedAssumptionAnswer());
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl(wizardDao0, spellbookDao0, spellDao0);
      List<Spellbook> list0 = magicServiceImpl0.findAllSpellbooks();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl((WizardDao) null, (SpellbookDao) null, (SpellDao) null);
      // Undeclared exception!
      try { 
        magicServiceImpl0.findWizardsWithSpell((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.servicelayer.spell.SpellDao.findByName(String)\" because \"this.spellDao\" is null
         //
         verifyException("com.iluwatar.servicelayer.magic.MagicServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl((WizardDao) null, (SpellbookDao) null, (SpellDao) null);
      // Undeclared exception!
      try { 
        magicServiceImpl0.findAllWizards();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.servicelayer.wizard.WizardDao.findAll()\" because \"this.wizardDao\" is null
         //
         verifyException("com.iluwatar.servicelayer.magic.MagicServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl((WizardDao) null, (SpellbookDao) null, (SpellDao) null);
      // Undeclared exception!
      try { 
        magicServiceImpl0.findAllSpellbooks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.servicelayer.spellbook.SpellbookDao.findAll()\" because \"this.spellbookDao\" is null
         //
         verifyException("com.iluwatar.servicelayer.magic.MagicServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl((WizardDao) null, (SpellbookDao) null, (SpellDao) null);
      // Undeclared exception!
      try { 
        magicServiceImpl0.findWizardsWithSpellbook("LG\"D[~`|Y}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.servicelayer.spellbook.SpellbookDao.findByName(String)\" because \"this.spellbookDao\" is null
         //
         verifyException("com.iluwatar.servicelayer.magic.MagicServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MagicServiceImpl magicServiceImpl0 = new MagicServiceImpl((WizardDao) null, (SpellbookDao) null, (SpellDao) null);
      // Undeclared exception!
      try { 
        magicServiceImpl0.findAllSpells();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.servicelayer.spell.SpellDao.findAll()\" because \"this.spellDao\" is null
         //
         verifyException("com.iluwatar.servicelayer.magic.MagicServiceImpl", e);
      }
  }
}
