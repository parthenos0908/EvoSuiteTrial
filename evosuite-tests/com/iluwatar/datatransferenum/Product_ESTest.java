/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 04:28:21 GMT 2021
 */

package com.iluwatar.datatransferenum;

import org.junit.Test;
import static org.junit.Assert.*;
import com.iluwatar.datatransferenum.Product;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Product_ESTest extends Product_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = new Long(264L);
      Double double0 = new Double(264L);
      Double double1 = new Double((-1319.04));
      Product product0 = new Product(long0, "", double0, double1, "");
      assertEquals("Product{id=264, name='', price=264.0, cost=-1319.04, supplier=''}", product0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Product product0 = new Product();
      product0.setSupplier("Product{id=null, name='null', price=null, cost=-1.0, supplier='null'}");
      String string0 = product0.getSupplier();
      assertEquals("Product{id=null, name='null', price=null, cost=-1.0, supplier='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Product product0 = new Product();
      Double double0 = new Double(0.0);
      Product product1 = product0.setPrice(double0);
      Double double1 = product1.getPrice();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = new Long(264L);
      Double double0 = new Double(264L);
      Product product0 = new Product(long0, "", double0, double0, "");
      Double double1 = product0.getPrice();
      assertEquals(264.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Product product0 = new Product();
      Double double0 = new Double((-1.0));
      product0.setPrice(double0);
      Double double1 = product0.getPrice();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Long long0 = new Long(264L);
      Double double0 = new Double(264L);
      Product product0 = new Product(long0, "", double0, double0, "");
      product0.setName("Ibq+NU+w(");
      String string0 = product0.getName();
      assertEquals("Ibq+NU+w(", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Product product0 = new Product();
      product0.setName("");
      String string0 = product0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Product product0 = new Product();
      Long long0 = new Long(0L);
      product0.setId(long0);
      Long long1 = product0.getId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Product product0 = new Product();
      Long long0 = new Long(1575L);
      product0.setId(long0);
      Long long1 = product0.getId();
      assertEquals(1575L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Product product0 = new Product();
      Long long0 = new Long((-1L));
      product0.setId(long0);
      Long long1 = product0.getId();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long(1L);
      Double double0 = new Double(1L);
      Product product0 = new Product(long0, "b8Y^f@HlW ", double0, double0, (String) null);
      product0.getCost();
      assertEquals("Product{id=1, name='b8Y^f@HlW ', price=1.0, cost=1.0, supplier='null'}", product0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Product product0 = new Product();
      Double double0 = new Double((-1.0));
      product0.setCost(double0);
      Double double1 = product0.getCost();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Product product0 = new Product();
      Double double0 = product0.getCost();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Product product0 = new Product();
      product0.setSupplier("");
      String string0 = product0.getSupplier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Product product0 = new Product();
      String string0 = product0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Product product0 = new Product();
      Long long0 = product0.getId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Product product0 = new Product();
      Double double0 = product0.getPrice();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Product product0 = new Product();
      String string0 = product0.getSupplier();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Product product0 = new Product();
      String string0 = product0.toString();
      assertEquals("Product{id=null, name='null', price=null, cost=null, supplier='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Product product0 = new Product();
      Double double0 = new Double(0.0);
      product0.setCost(double0);
      Double double1 = product0.getCost();
      assertEquals(0.0, (double)double1, 0.01);
  }
}
