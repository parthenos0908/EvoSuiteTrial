/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 04:29:38 GMT 2021
 */

package com.iluwatar.datatransferenum;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.datatransferenum.Product;
import com.iluwatar.datatransferenum.ProductDto;
import com.iluwatar.datatransferenum.ProductResource;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProductResource_ESTest extends ProductResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Product> linkedList0 = new LinkedList<Product>();
      ProductResource productResource0 = new ProductResource(linkedList0);
      ProductDto.Request.Create productDto_Request_Create0 = new ProductDto.Request.Create();
      productResource0.save(productDto_Request_Create0);
      assertNull(productDto_Request_Create0.getSupplier());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProductResource productResource0 = new ProductResource((List<Product>) null);
      List<Product> list0 = productResource0.getProducts();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Product> linkedList0 = new LinkedList<Product>();
      ProductResource productResource0 = new ProductResource(linkedList0);
      List<Product> list0 = productResource0.getProducts();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Product> linkedList0 = new LinkedList<Product>();
      Long long0 = new Long((-613L));
      Double double0 = new Double(0.0);
      Product product0 = new Product(long0, (String) null, double0, double0, (String) null);
      linkedList0.add(product0);
      ProductResource productResource0 = new ProductResource(linkedList0);
      List<Product> list0 = productResource0.getProducts();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Product> linkedList0 = new LinkedList<Product>();
      Long long0 = new Long((-613L));
      Double double0 = new Double(0.0);
      Product product0 = new Product(long0, (String) null, double0, double0, (String) null);
      linkedList0.add(product0);
      ProductResource productResource0 = new ProductResource(linkedList0);
      List<ProductDto.Response.Public> list0 = productResource0.getAllProductsForCustomer();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Product> linkedList0 = new LinkedList<Product>();
      ProductResource productResource0 = new ProductResource(linkedList0);
      List<ProductDto.Response.Private> list0 = productResource0.getAllProductsForAdmin();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Product> linkedList0 = new LinkedList<Product>();
      Long long0 = new Long((-613L));
      Double double0 = new Double(0.0);
      Product product0 = new Product(long0, (String) null, double0, double0, (String) null);
      linkedList0.add(product0);
      ProductResource productResource0 = new ProductResource(linkedList0);
      List<ProductDto.Response.Private> list0 = productResource0.getAllProductsForAdmin();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List<Product> list0 = List.of();
      ProductResource productResource0 = new ProductResource(list0);
      ProductDto.Request.Create productDto_Request_Create0 = new ProductDto.Request.Create();
      // Undeclared exception!
      try { 
        productResource0.save(productDto_Request_Create0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProductResource productResource0 = new ProductResource((List<Product>) null);
      // Undeclared exception!
      try { 
        productResource0.getAllProductsForCustomer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.List.stream()\" because \"this.products\" is null
         //
         verifyException("com.iluwatar.datatransferenum.ProductResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Product> linkedList0 = new LinkedList<Product>();
      ProductResource productResource0 = new ProductResource(linkedList0);
      List<ProductDto.Response.Public> list0 = productResource0.getAllProductsForCustomer();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProductResource productResource0 = new ProductResource((List<Product>) null);
      ProductDto.Request.Create productDto_Request_Create0 = new ProductDto.Request.Create();
      // Undeclared exception!
      try { 
        productResource0.save(productDto_Request_Create0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.List.size()\" because \"this.products\" is null
         //
         verifyException("com.iluwatar.datatransferenum.ProductResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProductResource productResource0 = new ProductResource((List<Product>) null);
      // Undeclared exception!
      try { 
        productResource0.getAllProductsForAdmin();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.List.stream()\" because \"this.products\" is null
         //
         verifyException("com.iluwatar.datatransferenum.ProductResource", e);
      }
  }
}
