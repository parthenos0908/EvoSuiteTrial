/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 14:07:23 GMT 2021
 */

package com.iluwatar.versionnumber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.versionnumber.Book;
import com.iluwatar.versionnumber.BookRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BookRepository_ESTest extends BookRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BookRepository bookRepository0 = new BookRepository();
      Book book0 = new Book();
      bookRepository0.add(book0);
      Book book1 = new Book(book0);
      bookRepository0.update(book1);
      try { 
        bookRepository0.update(book0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tried to update stale version 0 while actual version is 1
         //
         verifyException("com.iluwatar.versionnumber.BookRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BookRepository bookRepository0 = new BookRepository();
      Book book0 = new Book();
      book0.setVersion((-1710L));
      bookRepository0.add(book0);
      Book book1 = bookRepository0.get(0L);
      assertEquals("", book1.getAuthor());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Book book0 = new Book();
      book0.setId(2744L);
      BookRepository bookRepository0 = new BookRepository();
      bookRepository0.add(book0);
      Book book1 = bookRepository0.get(2744L);
      assertNotSame(book1, book0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BookRepository bookRepository0 = new BookRepository();
      Book book0 = new Book();
      book0.setId((-1L));
      bookRepository0.add(book0);
      Book book1 = bookRepository0.get((-1L));
      assertEquals("", book1.getTitle());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BookRepository bookRepository0 = new BookRepository();
      // Undeclared exception!
      try { 
        bookRepository0.update((Book) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.versionnumber.Book.getId()\" because \"book\" is null
         //
         verifyException("com.iluwatar.versionnumber.BookRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BookRepository bookRepository0 = new BookRepository();
      // Undeclared exception!
      try { 
        bookRepository0.add((Book) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.versionnumber.Book.getId()\" because \"book\" is null
         //
         verifyException("com.iluwatar.versionnumber.BookRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BookRepository bookRepository0 = new BookRepository();
      try { 
        bookRepository0.get(0L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not found book with id: 0
         //
         verifyException("com.iluwatar.versionnumber.BookRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BookRepository bookRepository0 = new BookRepository();
      Book book0 = new Book();
      Book book1 = new Book(book0);
      bookRepository0.add(book1);
      bookRepository0.update(book1);
      BookRepository bookRepository1 = new BookRepository();
      bookRepository1.add(book0);
      Book book2 = new Book(book1);
      try { 
        bookRepository1.update(book2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tried to update stale version 1 while actual version is 0
         //
         verifyException("com.iluwatar.versionnumber.BookRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BookRepository bookRepository0 = new BookRepository();
      Book book0 = new Book();
      bookRepository0.add(book0);
      bookRepository0.update(book0);
      assertEquals(1L, book0.getVersion());
      
      Book book1 = bookRepository0.get(0L);
      assertEquals(1L, book1.getVersion());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BookRepository bookRepository0 = new BookRepository();
      Book book0 = new Book();
      try { 
        bookRepository0.update(book0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not found book with id: 0
         //
         verifyException("com.iluwatar.versionnumber.BookRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BookRepository bookRepository0 = new BookRepository();
      Book book0 = new Book();
      bookRepository0.add(book0);
      try { 
        bookRepository0.add(book0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Duplicated book with id: 0
         //
         verifyException("com.iluwatar.versionnumber.BookRepository", e);
      }
  }
}
