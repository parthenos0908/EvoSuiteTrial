/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 14:06:05 GMT 2021
 */

package com.iluwatar.versionnumber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.versionnumber.Book;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Book_ESTest extends Book_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Book book0 = new Book();
      book0.setVersion(2719L);
      long long0 = book0.getVersion();
      assertEquals(2719L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Book book0 = new Book();
      book0.setVersion((-4008L));
      long long0 = book0.getVersion();
      assertEquals((-4008L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Book book0 = new Book();
      book0.setTitle((String) null);
      book0.getTitle();
      assertEquals(0L, book0.getVersion());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Book book0 = new Book();
      book0.setTitle("yC=A^G8YD");
      book0.getTitle();
      assertEquals(0L, book0.getVersion());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Book book0 = new Book();
      book0.setId(692L);
      long long0 = book0.getId();
      assertEquals(692L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Book book0 = new Book();
      book0.setId((-1433L));
      long long0 = book0.getId();
      assertEquals((-1433L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Book book0 = new Book();
      book0.setAuthor((String) null);
      book0.getAuthor();
      assertEquals(0L, book0.getVersion());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Book book0 = new Book();
      book0.setAuthor("9&*+XKm!!'$&-D");
      book0.getAuthor();
      assertEquals(0L, book0.getVersion());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Book book0 = null;
      try {
        book0 = new Book((Book) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot read field \"id\"
         //
         verifyException("com.iluwatar.versionnumber.Book", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Book book0 = new Book();
      Book book1 = new Book(book0);
      assertEquals(0L, book1.getVersion());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Book book0 = new Book();
      book0.getId();
      assertEquals(0L, book0.getVersion());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Book book0 = new Book();
      book0.getAuthor();
      assertEquals(0L, book0.getVersion());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Book book0 = new Book();
      long long0 = book0.getVersion();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Book book0 = new Book();
      book0.getTitle();
      assertEquals(0L, book0.getVersion());
  }
}
