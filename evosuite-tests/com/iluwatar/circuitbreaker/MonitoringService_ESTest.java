/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 03:20:53 GMT 2021
 */

package com.iluwatar.circuitbreaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.circuitbreaker.CircuitBreaker;
import com.iluwatar.circuitbreaker.DefaultCircuitBreaker;
import com.iluwatar.circuitbreaker.DelayedRemoteService;
import com.iluwatar.circuitbreaker.MonitoringService;
import com.iluwatar.circuitbreaker.QuickRemoteService;
import com.iluwatar.circuitbreaker.RemoteService;
import com.iluwatar.circuitbreaker.State;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MonitoringService_ESTest extends MonitoringService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker((RemoteService) null, 3312L, 1, 1L);
      MonitoringService monitoringService0 = new MonitoringService(defaultCircuitBreaker0, (CircuitBreaker) null);
      assertEquals("Local Service is working", monitoringService0.localResourceResponse());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DelayedRemoteService delayedRemoteService0 = new DelayedRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(delayedRemoteService0, 0L, 1337, 0L);
      MonitoringService monitoringService0 = new MonitoringService(defaultCircuitBreaker0, defaultCircuitBreaker0);
      String string0 = monitoringService0.quickServiceResponse();
      assertEquals("Delayed service is down", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DelayedRemoteService delayedRemoteService0 = new DelayedRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(delayedRemoteService0, 0L, 1337, 0L);
      MonitoringService monitoringService0 = new MonitoringService(defaultCircuitBreaker0, defaultCircuitBreaker0);
      String string0 = monitoringService0.delayedServiceResponse();
      assertEquals("Delayed service is down", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker((RemoteService) null, 0L, 0, (-2072L));
      State state0 = State.HALF_OPEN;
      defaultCircuitBreaker0.setState(state0);
      MonitoringService monitoringService0 = new MonitoringService(defaultCircuitBreaker0, defaultCircuitBreaker0);
      String string0 = monitoringService0.quickServiceResponse();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuickRemoteService quickRemoteService0 = new QuickRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(quickRemoteService0, 0L, 0, 0L);
      MonitoringService monitoringService0 = new MonitoringService(defaultCircuitBreaker0, defaultCircuitBreaker0);
      defaultCircuitBreaker0.recordFailure("");
      String string0 = monitoringService0.quickServiceResponse();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker((RemoteService) null, 0L, 0, (-2072L));
      State state0 = State.HALF_OPEN;
      defaultCircuitBreaker0.setState(state0);
      MonitoringService monitoringService0 = new MonitoringService(defaultCircuitBreaker0, defaultCircuitBreaker0);
      String string0 = monitoringService0.delayedServiceResponse();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuickRemoteService quickRemoteService0 = new QuickRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(quickRemoteService0, 0L, 0, 0L);
      MonitoringService monitoringService0 = new MonitoringService(defaultCircuitBreaker0, defaultCircuitBreaker0);
      defaultCircuitBreaker0.recordFailure("");
      String string0 = monitoringService0.delayedServiceResponse();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MonitoringService monitoringService0 = new MonitoringService((CircuitBreaker) null, (CircuitBreaker) null);
      // Undeclared exception!
      try { 
        monitoringService0.quickServiceResponse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.circuitbreaker.CircuitBreaker.attemptRequest()\" because \"this.quickService\" is null
         //
         verifyException("com.iluwatar.circuitbreaker.MonitoringService", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QuickRemoteService quickRemoteService0 = new QuickRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(quickRemoteService0, 0L, 0, 0L);
      MonitoringService monitoringService0 = new MonitoringService(defaultCircuitBreaker0, defaultCircuitBreaker0);
      String string0 = monitoringService0.localResourceResponse();
      assertEquals("Local Service is working", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MonitoringService monitoringService0 = new MonitoringService((CircuitBreaker) null, (CircuitBreaker) null);
      // Undeclared exception!
      try { 
        monitoringService0.delayedServiceResponse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.circuitbreaker.CircuitBreaker.attemptRequest()\" because \"this.delayedService\" is null
         //
         verifyException("com.iluwatar.circuitbreaker.MonitoringService", e);
      }
  }
}
