/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 03:18:39 GMT 2021
 */

package com.iluwatar.circuitbreaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.circuitbreaker.DefaultCircuitBreaker;
import com.iluwatar.circuitbreaker.DelayedRemoteService;
import com.iluwatar.circuitbreaker.QuickRemoteService;
import com.iluwatar.circuitbreaker.RemoteService;
import com.iluwatar.circuitbreaker.State;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultCircuitBreaker_ESTest extends DefaultCircuitBreaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DelayedRemoteService delayedRemoteService0 = new DelayedRemoteService((-1L), 2324);
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(delayedRemoteService0, 2324, 2324, 2324);
      State state0 = State.HALF_OPEN;
      defaultCircuitBreaker0.setState(state0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DelayedRemoteService delayedRemoteService0 = new DelayedRemoteService((-1L), 2324);
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(delayedRemoteService0, 2324, 2324, 2324);
      State state0 = State.OPEN;
      defaultCircuitBreaker0.setState(state0);
      String string0 = defaultCircuitBreaker0.attemptRequest();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DelayedRemoteService delayedRemoteService0 = new DelayedRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(delayedRemoteService0, 1529L, 1877, 0L);
      State state0 = State.HALF_OPEN;
      defaultCircuitBreaker0.setState(state0);
      defaultCircuitBreaker0.lastFailureTime = 1L;
      defaultCircuitBreaker0.evaluateState();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuickRemoteService quickRemoteService0 = new QuickRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(quickRemoteService0, 0L, 441, 0L);
      defaultCircuitBreaker0.evaluateState();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DelayedRemoteService delayedRemoteService0 = new DelayedRemoteService((-1L), 2324);
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(delayedRemoteService0, 2324, 2324, 2324);
      String string0 = defaultCircuitBreaker0.attemptRequest();
      assertEquals("Delayed service is working", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DelayedRemoteService delayedRemoteService0 = new DelayedRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(delayedRemoteService0, 0, 0, 0);
      // Undeclared exception!
      try { 
        defaultCircuitBreaker0.setState((State) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.circuitbreaker.State.ordinal()\" because \"state\" is null
         //
         verifyException("com.iluwatar.circuitbreaker.DefaultCircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker((RemoteService) null, (-3635), (-3635), (-3635));
      // Undeclared exception!
      try { 
        defaultCircuitBreaker0.attemptRequest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.circuitbreaker.RemoteService.call()\" because \"this.service\" is null
         //
         verifyException("com.iluwatar.circuitbreaker.DefaultCircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuickRemoteService quickRemoteService0 = new QuickRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(quickRemoteService0, 0L, 441, 0L);
      State state0 = State.HALF_OPEN;
      defaultCircuitBreaker0.setState(state0);
      String string0 = defaultCircuitBreaker0.attemptRequest();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuickRemoteService quickRemoteService0 = new QuickRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(quickRemoteService0, 0L, 441, 0L);
      State state0 = State.CLOSED;
      defaultCircuitBreaker0.setState(state0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DelayedRemoteService delayedRemoteService0 = new DelayedRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(delayedRemoteService0, (-3636), (-3636), (-3636));
      try { 
        defaultCircuitBreaker0.attemptRequest();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Delayed service is down
         //
         verifyException("com.iluwatar.circuitbreaker.DelayedRemoteService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuickRemoteService quickRemoteService0 = new QuickRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(quickRemoteService0, 0L, 441, 0L);
      State state0 = State.HALF_OPEN;
      defaultCircuitBreaker0.setState(state0);
      String string0 = defaultCircuitBreaker0.getState();
      assertEquals("OPEN", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuickRemoteService quickRemoteService0 = new QuickRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(quickRemoteService0, 0L, 441, 0L);
      defaultCircuitBreaker0.recordFailure("");
      State state0 = State.HALF_OPEN;
      defaultCircuitBreaker0.setState(state0);
      String string0 = defaultCircuitBreaker0.attemptRequest();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuickRemoteService quickRemoteService0 = new QuickRemoteService();
      DefaultCircuitBreaker defaultCircuitBreaker0 = new DefaultCircuitBreaker(quickRemoteService0, 0L, 441, 0L);
      defaultCircuitBreaker0.recordSuccess();
  }
}
