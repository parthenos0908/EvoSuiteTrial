/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 05:46:28 GMT 2021
 */

package com.iluwatar.fluentinterface.fluentiterable.lazy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.fluentinterface.fluentiterable.FluentIterable;
import com.iluwatar.fluentinterface.fluentiterable.lazy.LazyFluentIterable;
import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Optional;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.TreeSet;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LazyFluentIterable_ESTest extends LazyFluentIterable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(treeSet0);
      LazyFluentIterable<Object> lazyFluentIterable0 = new LazyFluentIterable<Object>(arrayDeque0);
      FluentIterable<Object> fluentIterable0 = lazyFluentIterable0.first(339);
      assertNotNull(fluentIterable0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LazyFluentIterable<Object> lazyFluentIterable0 = new LazyFluentIterable<Object>((Iterable<Object>) null);
      // Undeclared exception!
      try { 
        lazyFluentIterable0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.iterator()\" because \"this.this$0.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.lazy.LazyFluentIterable$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TreeSet<Locale.IsoCountryCode> treeSet0 = new TreeSet<Locale.IsoCountryCode>();
      FluentIterable<Locale.IsoCountryCode> fluentIterable0 = LazyFluentIterable.from((Iterable<Locale.IsoCountryCode>) treeSet0);
      assertNotNull(fluentIterable0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LazyFluentIterable<Integer> lazyFluentIterable0 = new LazyFluentIterable<Integer>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      FluentIterable<Integer> fluentIterable0 = lazyFluentIterable0.filter(predicate0);
      assertNotNull(fluentIterable0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      LazyFluentIterable<Integer> lazyFluentIterable0 = new LazyFluentIterable<Integer>(serviceLoader0);
      List<Integer> list0 = lazyFluentIterable0.asList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(1578);
      List<Integer> list0 = FluentIterable.copyToList((Iterable<Integer>) priorityQueue0);
      LazyFluentIterable<Integer> lazyFluentIterable0 = new LazyFluentIterable<Integer>(list0);
      Iterator<Integer> iterator0 = lazyFluentIterable0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      LazyFluentIterable<Object> lazyFluentIterable0 = new LazyFluentIterable<Object>(treeSet0);
      FluentIterable<Object> fluentIterable0 = lazyFluentIterable0.last(0);
      assertNotNull(fluentIterable0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      LazyFluentIterable<Object> lazyFluentIterable0 = new LazyFluentIterable<Object>(treeSet0);
      Optional<Object> optional0 = lazyFluentIterable0.first();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      LazyFluentIterable<Object> lazyFluentIterable0 = new LazyFluentIterable<Object>(arrayDeque0);
      FluentIterable<Locale.IsoCountryCode> fluentIterable0 = lazyFluentIterable0.map((Function<? super Object, Locale.IsoCountryCode>) null);
      assertNotNull(fluentIterable0);
  }
}
