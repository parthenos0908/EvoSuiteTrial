/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 05:47:41 GMT 2021
 */

package com.iluwatar.fluentinterface.fluentiterable.simple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.fluentinterface.fluentiterable.FluentIterable;
import com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.Optional;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleFluentIterable_ESTest extends SimpleFluentIterable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1);
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0, integer0, integer0, integer0);
      SimpleFluentIterable<Integer> simpleFluentIterable0 = new SimpleFluentIterable<Integer>(list0);
      Function<Object, Object> function0 = Function.identity();
      FluentIterable<Object> fluentIterable0 = simpleFluentIterable0.map((Function<? super Integer, Object>) function0);
      SimpleFluentIterable<Object> simpleFluentIterable1 = new SimpleFluentIterable<Object>(fluentIterable0);
      FluentIterable<Object> fluentIterable1 = simpleFluentIterable1.last(7);
      assertNotSame(fluentIterable0, fluentIterable1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(0, 0);
      SimpleFluentIterable<String> simpleFluentIterable0 = new SimpleFluentIterable<String>(vector0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simpleFluentIterable0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      List<String> list0 = SimpleFluentIterable.toList((Iterator<String>) listIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>(1, 1574.5592F);
      SimpleFluentIterable<String> simpleFluentIterable0 = new SimpleFluentIterable<String>(hashSet0);
      Spliterator<String> spliterator0 = simpleFluentIterable0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(0, 0);
      SimpleFluentIterable<String> simpleFluentIterable0 = new SimpleFluentIterable<String>(vector0);
      int int0 = simpleFluentIterable0.getRemainingElementsCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Set<Object> set0 = hashMap0.keySet();
      hashMap0.put(set0, set0);
      SimpleFluentIterable<Object> simpleFluentIterable0 = new SimpleFluentIterable<Object>(set0);
      List<Object> list0 = simpleFluentIterable0.asList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      linkedList0.clear();
      // Undeclared exception!
      try { 
        SimpleFluentIterable.toList((Iterator<Integer>) listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleFluentIterable.toList((Iterator<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.Iterator.forEachRemaining(java.util.function.Consumer)\" because \"iterator\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>((Iterable<Locale.FilteringMode>) null);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        simpleFluentIterable0.map((Function<? super Locale.FilteringMode, Object>) unaryOperator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.forEach(java.util.function.Consumer)\" because \"this.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleFluentIterable<Object> simpleFluentIterable0 = new SimpleFluentIterable<Object>((Iterable<Object>) null);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.last((-1928));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.iterator()\" because \"this.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale.FilteringMode> list0 = List.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>(list0);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.last();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>((Iterable<Locale.FilteringMode>) null);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.iterator()\" because \"this.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleFluentIterable<Object> simpleFluentIterable0 = new SimpleFluentIterable<Object>((Iterable<Object>) null);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.iterator()\" because \"this.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleFluentIterable<Object> simpleFluentIterable0 = new SimpleFluentIterable<Object>((Iterable<Object>) null);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.getRemainingElementsCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.iterator()\" because \"this.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleFluentIterable.fromCopyOf((Iterable<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.forEach(java.util.function.Consumer)\" because \"iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.FluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      List<Locale> list0 = List.of(locale0, locale0, locale0);
      SimpleFluentIterable<Locale> simpleFluentIterable0 = new SimpleFluentIterable<Locale>(list0);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.first((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleFluentIterable<Object> simpleFluentIterable0 = new SimpleFluentIterable<Object>((Iterable<Object>) null);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.first((-212));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.iterator()\" because \"this.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Integer integer0 = new Integer((-309));
      treeSet0.add(locale_FilteringMode0);
      NavigableSet<Object> navigableSet0 = treeSet0.tailSet((Object) integer0, true);
      SimpleFluentIterable<Object> simpleFluentIterable0 = new SimpleFluentIterable<Object>(navigableSet0);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.first((-309));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.Locale$FilteringMode cannot be cast to class java.lang.Integer (java.util.Locale$FilteringMode and java.lang.Integer are in module java.base of loader 'bootstrap')
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      List<List<String>> list0 = List.of((List<String>) vector0, (List<String>) vector0, (List<String>) vector0, (List<String>) vector0, (List<String>) vector0, (List<String>) vector0, (List<String>) vector0, (List<String>) vector0);
      SimpleFluentIterable<List<String>> simpleFluentIterable0 = new SimpleFluentIterable<List<String>>(list0);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.first();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleFluentIterable<Integer> simpleFluentIterable0 = new SimpleFluentIterable<Integer>((Iterable<Integer>) null);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.iterator()\" because \"this.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale.FilteringMode> list0 = List.of(locale_FilteringMode0);
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>(list0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) list0);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.filter(predicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleFluentIterable<Integer> simpleFluentIterable0 = new SimpleFluentIterable<Integer>((Iterable<Integer>) null);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.filter((Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.iterator()\" because \"this.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>((Iterable<Locale.FilteringMode>) null);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.asList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.iterator()\" because \"this.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      treeSet0.addAll(set0);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      FluentIterable<String> fluentIterable0 = SimpleFluentIterable.from((Iterable<String>) priorityQueue0);
      SimpleFluentIterable<String> simpleFluentIterable0 = new SimpleFluentIterable<String>(fluentIterable0);
      int int0 = simpleFluentIterable0.getRemainingElementsCount();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale.FilteringMode> list0 = List.of(locale_FilteringMode0, locale_FilteringMode0);
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>(list0);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.last((-14));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      priorityQueue0.add("");
      SimpleFluentIterable<String> simpleFluentIterable0 = new SimpleFluentIterable<String>(priorityQueue0);
      simpleFluentIterable0.first(0);
      assertFalse(priorityQueue0.contains(""));
      assertEquals(0, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      priorityQueue0.add("");
      SimpleFluentIterable<String> simpleFluentIterable0 = new SimpleFluentIterable<String>(priorityQueue0);
      simpleFluentIterable0.first(2971);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      SimpleFluentIterable<String> simpleFluentIterable0 = new SimpleFluentIterable<String>(priorityQueue0);
      Iterator<String> iterator0 = simpleFluentIterable0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>((Iterable<Locale.FilteringMode>) null);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.forEach((Consumer<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.forEach(java.util.function.Consumer)\" because \"this.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SimpleFluentIterable<Object> simpleFluentIterable0 = new SimpleFluentIterable<Object>(arrayDeque0);
      List<Object> list0 = simpleFluentIterable0.asList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      List<Integer> list0 = SimpleFluentIterable.toList((Iterator<Integer>) listIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>(treeSet0);
      Optional<Locale.FilteringMode> optional0 = simpleFluentIterable0.last();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>(enumSet0);
      Optional<Locale.FilteringMode> optional0 = simpleFluentIterable0.first();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>(arrayDeque0);
      Optional<Locale.FilteringMode> optional0 = simpleFluentIterable0.first();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>(enumSet0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) locale_FilteringMode0);
      simpleFluentIterable0.filter(predicate0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FluentIterable<Object> fluentIterable0 = SimpleFluentIterable.from((Iterable<Object>) linkedList0);
      FluentIterable<Object> fluentIterable1 = SimpleFluentIterable.fromCopyOf((Iterable<Object>) fluentIterable0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleFluentIterable<Object> simpleFluentIterable0 = new SimpleFluentIterable<Object>((Iterable<Object>) null);
      // Undeclared exception!
      try { 
        simpleFluentIterable0.spliterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.lang.Iterable.spliterator()\" because \"this.iterable\" is null
         //
         verifyException("com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      SimpleFluentIterable<Locale.FilteringMode> simpleFluentIterable0 = new SimpleFluentIterable<Locale.FilteringMode>(enumSet0);
      Optional<Locale.FilteringMode> optional0 = simpleFluentIterable0.last();
      assertNotNull(optional0);
  }
}
