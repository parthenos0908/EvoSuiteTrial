/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 02:52:18 GMT 2021
 */

package com.iluwatar.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.builder.Armor;
import com.iluwatar.builder.HairColor;
import com.iluwatar.builder.HairType;
import com.iluwatar.builder.Hero;
import com.iluwatar.builder.Profession;
import com.iluwatar.builder.Weapon;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Hero_ESTest extends Hero_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Profession profession0 = Profession.MAGE;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, "v/~jYj<)~^=FeKu[c");
      Weapon weapon0 = Weapon.AXE;
      hero_Builder0.withWeapon(weapon0);
      Hero hero0 = hero_Builder0.build();
      Weapon weapon1 = hero0.getWeapon();
      assertSame(weapon1, weapon0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Profession profession0 = Profession.WARRIOR;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, "");
      Hero hero0 = hero_Builder0.build();
      String string0 = hero0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Profession profession0 = Profession.MAGE;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, "v/~jYj<)~^=FeKu[c");
      HairType hairType0 = HairType.CURLY;
      hero_Builder0.withHairType(hairType0);
      Hero hero0 = hero_Builder0.build();
      HairType hairType1 = hero0.getHairType();
      assertEquals("curly", hairType1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Profession profession0 = Profession.MAGE;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, "v/~jYj<)~^=FeKu[c");
      HairColor hairColor0 = HairColor.RED;
      hero_Builder0.withHairColor(hairColor0);
      Hero hero0 = hero_Builder0.build();
      HairColor hairColor1 = hero0.getHairColor();
      assertSame(hairColor1, hairColor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Profession profession0 = Profession.WARRIOR;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, "WtokE");
      Armor armor0 = Armor.PLATE_MAIL;
      hero_Builder0.withArmor(armor0);
      Hero hero0 = hero_Builder0.build();
      Armor armor1 = hero0.getArmor();
      assertEquals(Armor.PLATE_MAIL, armor1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Profession profession0 = Profession.THIEF;
      Hero.Builder hero_Builder0 = null;
      try {
        hero_Builder0 = new Hero.Builder(profession0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // profession and name can not be null
         //
         verifyException("com.iluwatar.builder.Hero$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hero.Builder hero_Builder0 = null;
      try {
        hero_Builder0 = new Hero.Builder((Profession) null, "com.iluwatar.builder.Weapon");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // profession and name can not be null
         //
         verifyException("com.iluwatar.builder.Hero$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Profession profession0 = Profession.PRIEST;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, ":9d9[emNZgU");
      Weapon weapon0 = Weapon.WARHAMMER;
      hero_Builder0.withWeapon(weapon0);
      Hero hero0 = hero_Builder0.build();
      String string0 = hero0.toString();
      assertEquals("This is a priest named :9d9[emNZgU and wielding a warhammer.", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Profession profession0 = Profession.WARRIOR;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, "WtokE");
      Armor armor0 = Armor.PLATE_MAIL;
      hero_Builder0.withArmor(armor0);
      Hero hero0 = hero_Builder0.build();
      String string0 = hero0.toString();
      assertEquals("This is a warrior named WtokE wearing plate mail.", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Profession profession0 = Profession.PRIEST;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, ":9d9[emNZgU");
      HairColor hairColor0 = HairColor.BLOND;
      hero_Builder0.withHairColor(hairColor0);
      Hero hero0 = hero_Builder0.build();
      String string0 = hero0.toString();
      assertEquals("This is a priest named :9d9[emNZgU with blond hair.", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Profession profession0 = Profession.WARRIOR;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, "WtokE");
      Hero hero0 = hero_Builder0.build();
      Profession profession1 = hero0.getProfession();
      assertEquals(Profession.WARRIOR, profession1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Profession profession0 = Profession.PRIEST;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, ":9d9[emNZgU");
      Hero hero0 = hero_Builder0.build();
      hero0.getWeapon();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Profession profession0 = Profession.PRIEST;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, ":9d9[emNZgU");
      Hero hero0 = hero_Builder0.build();
      hero0.getHairColor();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Profession profession0 = Profession.WARRIOR;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, "WtokE");
      Hero hero0 = hero_Builder0.build();
      hero0.getArmor();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Profession profession0 = Profession.MAGE;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, "v/~jYj<)~^=FeKu[c");
      Hero hero0 = hero_Builder0.build();
      hero0.getHairType();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Profession profession0 = Profession.WARRIOR;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, "WtokE");
      Hero hero0 = hero_Builder0.build();
      String string0 = hero0.getName();
      assertEquals("WtokE", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Profession profession0 = Profession.THIEF;
      Hero.Builder hero_Builder0 = new Hero.Builder(profession0, "");
      HairType hairType0 = HairType.BALD;
      hero_Builder0.withHairType(hairType0);
      Hero hero0 = hero_Builder0.build();
      String string0 = hero0.toString();
      assertEquals("This is a thief named  with bald head.", string0);
  }
}
