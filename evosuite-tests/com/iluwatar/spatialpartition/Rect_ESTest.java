/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 13:03:15 GMT 2021
 */

package com.iluwatar.spatialpartition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.spatialpartition.Point;
import com.iluwatar.spatialpartition.Rect;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Rect_ESTest extends Rect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rect rect0 = new Rect(1.0, 1.0, 1.0, 2240.407);
      rect0.height = 1.0;
      Rect rect1 = new Rect(1.0, 0.0, (-29.15936383061011), 0.0);
      rect1.width = 1.0;
      rect1.height = 1.0;
      boolean boolean0 = rect0.intersects(rect1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rect rect0 = new Rect(1.0, (-646.2485818988538), (-646.2485818988538), (-646.2485818988538));
      Rect rect1 = new Rect(1.0, 1.0, 2008.1862250108, 2008.1862250108);
      boolean boolean0 = rect1.intersects(rect0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rect rect0 = new Rect(0, (-1.0), 292.0, 0.0);
      boolean boolean0 = rect0.intersects(rect0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 1.0);
      Rect rect1 = new Rect(0.0, 0.0, (-1268.466111626), 0.0);
      boolean boolean0 = rect1.intersects(rect0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 0.0);
      Point<Integer> point0 = (Point<Integer>) mock(Point.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = rect0.contains(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rect rect0 = new Rect((-1.0), 2756.60389923, (-232.161606), (-232.161606));
      // Undeclared exception!
      try { 
        rect0.intersects((Rect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot read field \"coordinateX\"
         //
         verifyException("com.iluwatar.spatialpartition.Rect", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 1.0);
      // Undeclared exception!
      try { 
        rect0.contains((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot read field \"coordinateX\" because \"p\" is null
         //
         verifyException("com.iluwatar.spatialpartition.Rect", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rect rect0 = new Rect(1.0, (-646.2485818988538), (-646.2485818988538), (-646.2485818988538));
      Rect rect1 = new Rect(1.0, 1.0, 2008.1862250108, 2008.1862250108);
      boolean boolean0 = rect0.intersects(rect1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rect rect0 = new Rect(1.0, 1.0, 2008.1862250108, 2008.1862250108);
      Rect rect1 = new Rect(0, 2008.1862250108, 0, 1.0);
      boolean boolean0 = rect0.intersects(rect1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rect rect0 = new Rect(1.0, (-646.2485818988538), (-646.2485818988538), (-646.2485818988538));
      Rect rect1 = new Rect(0, 2008.1862250108, 0, 1.0);
      rect1.coordinateX = 0.0;
      rect1.coordinateX = (-1850.27145142);
      boolean boolean0 = rect0.intersects(rect1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 1.0);
      Rect rect1 = new Rect(0.0, 1.0, 1.0, 0.0);
      boolean boolean0 = rect1.intersects(rect0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 1.0);
      boolean boolean0 = rect0.intersects(rect0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rect rect0 = new Rect(0.0, (-4884.34499), 1.0, 1077.0);
      Point<String> point0 = (Point<String>) mock(Point.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = rect0.contains(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, (-1533.0));
      Point<String> point0 = (Point<String>) mock(Point.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = rect0.contains(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rect rect0 = new Rect(0, 2008.1862250108, 0, 1.0);
      rect0.coordinateX = 0.0;
      rect0.coordinateX = (-1850.27145142);
      Point<Integer> point0 = (Point<Integer>) mock(Point.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = rect0.contains(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 1.0);
      Point<String> point0 = (Point<String>) mock(Point.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = rect0.contains(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rect rect0 = new Rect(1.0, 1.0, 1.0, 2240.407);
      Point<String> point0 = (Point<String>) mock(Point.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = rect0.contains(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rect rect0 = new Rect((-29.15936383061011), (-29.15936383061011), 0.0, 1.0);
      rect0.width = 1.0;
      rect0.coordinateX = 1.0;
      Rect rect1 = new Rect(0, (-4405.935053712486), 1.0, (-2850.583712737));
      boolean boolean0 = rect0.intersects(rect1);
      assertFalse(boolean0);
  }
}
