/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 13:03:04 GMT 2021
 */

package com.iluwatar.spatialpartition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.spatialpartition.Bubble;
import com.iluwatar.spatialpartition.Point;
import com.iluwatar.spatialpartition.QuadTree;
import com.iluwatar.spatialpartition.Rect;
import java.util.Collection;
import java.util.Hashtable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuadTree_ESTest extends QuadTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 1391.16589, 1.0);
      QuadTree quadTree0 = new QuadTree(rect0, 2512);
      Hashtable<Integer, Point> hashtable0 = (Hashtable<Integer, Point>)quadTree0.points;
      quadTree0.divide();
      Point<Object> point0 = (Point<Object>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
      quadTree0.divide();
      quadTree0.divide();
      // Undeclared exception!
      try { 
        quadTree0.query(rect0, (Collection<Point>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rect rect0 = new Rect(1965.7473908104494, 1.0, 1.0, 4606.520837);
      QuadTree quadTree0 = new QuadTree(rect0, 0);
      quadTree0.southeast = null;
      rect0.coordinateX = (double) 0;
      quadTree0.northeast = null;
      Point<Integer> point0 = (Point<Integer>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
      quadTree0.northeast.divide();
      quadTree0.northeast.capacity = 0;
      Point<String> point1 = (Point<String>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.southeast.insert(point1);
      int int0 = 282;
      int int1 = (-272);
      Bubble bubble0 = new Bubble(point0.id, int0, int1, point0.id);
      quadTree0.insert(bubble0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 1242.6);
      QuadTree quadTree0 = new QuadTree(rect0, 3);
      quadTree0.capacity = 0;
      Point<Integer> point0 = (Point<Integer>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.northwest = null;
      quadTree0.boundary = rect0;
      quadTree0.divided = true;
      quadTree0.divided = true;
      // Undeclared exception!
      try { 
        quadTree0.insert(point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rect rect0 = new Rect(1965.7473908104494, 1965.7473908104494, 1965.7473908104494, 4606.520837);
      QuadTree quadTree0 = new QuadTree(rect0, 0);
      quadTree0.southeast = quadTree0;
      rect0.coordinateX = (double) 0;
      quadTree0.northeast = null;
      Point<Integer> point0 = (Point<Integer>) mock(Point.class, new ViolatedAssumptionAnswer());
      Point<Integer> point1 = (Point<Integer>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.southeast.insert(point1);
      Bubble bubble0 = new Bubble(0, 0, 0, 0);
      quadTree0.northeast.insert(bubble0);
      quadTree0.divide();
      quadTree0.insert(bubble0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rect rect0 = new Rect(1965.7473908104494, 1965.7473908104494, 1965.7473908104494, 4606.520837);
      QuadTree quadTree0 = new QuadTree(rect0, 0);
      quadTree0.southeast = null;
      rect0.coordinateX = (double) 0;
      quadTree0.northeast = null;
      Point<Integer> point0 = (Point<Integer>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
      quadTree0.divide();
      Point<Integer> point1 = (Point<Integer>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.southeast.insert(point1);
      quadTree0.divide();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rect rect0 = new Rect(1965.7473908104494, 1.0, 1.0, 4606.520837);
      QuadTree quadTree0 = new QuadTree(rect0, 0);
      quadTree0.southeast = null;
      rect0.coordinateX = (double) 0;
      quadTree0.northeast = null;
      Point<Integer> point0 = (Point<Integer>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
      quadTree0.northeast.divide();
      quadTree0.northeast.capacity = 0;
      Point<String> point1 = (Point<String>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.northeast.insert(point1);
      quadTree0.southeast.divide();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rect rect0 = new Rect(1965.7473908104494, 1965.7473908104494, 1965.7473908104494, 4606.520837);
      QuadTree quadTree0 = new QuadTree(rect0, 0);
      quadTree0.southeast = null;
      rect0.coordinateX = (double) 0;
      quadTree0.northeast = null;
      quadTree0.divide();
      Point<Integer> point0 = (Point<Integer>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.southeast.insert(point0);
      quadTree0.divide();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 1391.16589, 1.0);
      QuadTree quadTree0 = new QuadTree(rect0, 2512);
      Point<String> point0 = (Point<String>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
      QuadTree quadTree1 = quadTree0.southeast;
      // Undeclared exception!
      try { 
        quadTree0.query(rect0, (Collection<Point>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 1391.16589, 1.0);
      QuadTree quadTree0 = new QuadTree(rect0, 2512);
      // Undeclared exception!
      try { 
        quadTree0.query(rect0, (Collection<Point>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 2455.6601196046, 2570.62365982246, 2455.6601196046);
      QuadTree quadTree0 = new QuadTree(rect0, 463);
      rect0.coordinateY = 2570.62365982246;
      Point<String> point0 = (Point<String>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
      Rect rect1 = new Rect(2455.6601196046, 623.19178644563, 0.0, 4.0);
      quadTree0.query(rect1, (Collection<Point>) null);
      quadTree0.query(rect1, (Collection<Point>) null);
      // Undeclared exception!
      try { 
        quadTree0.query(rect0, (Collection<Point>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rect rect0 = new Rect((-1.0), (-526.422534091076), 2512, 0.0);
      QuadTree quadTree0 = new QuadTree(rect0, 2512);
      Hashtable<Integer, Point> hashtable0 = (Hashtable<Integer, Point>)quadTree0.points;
      quadTree0.divide();
      Point<Integer> point0 = (Point<Integer>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
      rect0.width = (double) 0;
      quadTree0.divide();
      quadTree0.divide();
      Collection<Point> collection0 = (Collection<Point>)quadTree0.query(rect0, (Collection<Point>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 2054.808687914253, 2054.808687914253);
      rect0.width = 0.0;
      rect0.coordinateX = 2054.808687914253;
      QuadTree quadTree0 = new QuadTree(rect0, (-2728));
      quadTree0.query(rect0, (Collection<Point>) null);
      quadTree0.query(rect0, (Collection<Point>) null);
      quadTree0.query(rect0, (Collection<Point>) null);
      Point<String> point0 = (Point<String>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.divide();
      quadTree0.divided = false;
      quadTree0.insert(point0);
      Point<String> point1 = (Point<String>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point1);
      quadTree0.query(rect0, (Collection<Point>) null);
      rect0.height = 0.0;
      quadTree0.divide();
      quadTree0.query(rect0, (Collection<Point>) null);
      quadTree0.divide();
      quadTree0.divide();
      quadTree0.divide();
      quadTree0.query(rect0, (Collection<Point>) null);
      quadTree0.query(rect0, (Collection<Point>) null);
      quadTree0.query(rect0, (Collection<Point>) null);
      quadTree0.query(rect0, (Collection<Point>) null);
      quadTree0.divide();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rect rect0 = new Rect(1759.191756009362, 0.0, 4606.520837, (-2259.0));
      int int0 = 0;
      QuadTree quadTree0 = new QuadTree(rect0, 178);
      Point<String> point0 = null;
      // Undeclared exception!
      try { 
        quadTree0.insert((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rect rect0 = new Rect(1838.5107197871375, 1.0, 1838.5107197871375, 0.0);
      rect0.height = 1.0;
      rect0.height = 0.0;
      rect0.coordinateX = 0.0;
      rect0.coordinateX = 0.0;
      rect0.coordinateY = 2338.586180343835;
      rect0.coordinateY = 1.0;
      rect0.coordinateX = (-1366.147020313454);
      QuadTree quadTree0 = new QuadTree(rect0, (-2123));
      quadTree0.points = null;
      Bubble bubble0 = new Bubble((-2123), (-2123), (-2123), (-2123));
      quadTree0.insert(bubble0);
      quadTree0.insert(bubble0);
      QuadTree quadTree1 = new QuadTree(rect0, 0);
      quadTree0.insert(bubble0);
      assertEquals((-2123), bubble0.id);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rect rect0 = new Rect(1838.5107197871375, 1.0, 1838.5107197871375, 0.0);
      rect0.height = 1.0;
      rect0.height = 0.0;
      rect0.coordinateX = 0.0;
      rect0.coordinateX = 0.0;
      rect0.coordinateY = 2338.586180343835;
      rect0.coordinateY = 1.0;
      int int0 = (-2123);
      rect0.coordinateX = (-1366.147020313454);
      QuadTree quadTree0 = new QuadTree(rect0, (-2123));
      quadTree0.points = null;
      Bubble bubble0 = new Bubble((-2123), (-2123), (-2123), (-2123));
      quadTree0.insert(bubble0);
      quadTree0.insert(bubble0);
      quadTree0.divide();
      QuadTree quadTree1 = quadTree0.southwest;
      Hashtable<Integer, Bubble> hashtable0 = new Hashtable<Integer, Bubble>();
      // Undeclared exception!
      try { 
        bubble0.handleCollision((Collection<? extends Point>) null, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.Collection.iterator()\" because \"toCheck\" is null
         //
         verifyException("com.iluwatar.spatialpartition.Bubble", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rect rect0 = new Rect((-812.5972692476525), (-812.5972692476525), 2415.99593328674, (-812.5972692476525));
      QuadTree quadTree0 = new QuadTree(rect0, 342);
  }
}
