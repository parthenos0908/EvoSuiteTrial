/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 13:38:12 GMT 2021
 */

package com.iluwatar.throttling;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.throttling.CallsCount;
import com.iluwatar.throttling.Tenant;
import java.security.InvalidParameterException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tenant_ESTest extends Tenant_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CallsCount callsCount0 = new CallsCount();
      Tenant tenant0 = new Tenant("com.iluwatar.throttling.Tenant", 47, callsCount0);
      tenant0.getName();
      assertEquals(47, tenant0.getAllowedCallsPerSecond());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CallsCount callsCount0 = new CallsCount();
      Tenant tenant0 = new Tenant("0VdvWt$?&", 0, callsCount0);
      int int0 = tenant0.getAllowedCallsPerSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CallsCount callsCount0 = new CallsCount();
      Tenant tenant0 = null;
      try {
        tenant0 = new Tenant((String) null, 2857, callsCount0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CallsCount callsCount0 = new CallsCount();
      Tenant tenant0 = null;
      try {
        tenant0 = new Tenant((String) null, (-153), callsCount0);
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // Number of calls less than 0 not allowed
         //
         verifyException("com.iluwatar.throttling.Tenant", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CallsCount callsCount0 = new CallsCount();
      Tenant tenant0 = new Tenant("", 288, callsCount0);
      int int0 = tenant0.getAllowedCallsPerSecond();
      assertEquals(288, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CallsCount callsCount0 = new CallsCount();
      Tenant tenant0 = new Tenant("", 288, callsCount0);
      tenant0.getName();
      assertEquals(288, tenant0.getAllowedCallsPerSecond());
  }
}
