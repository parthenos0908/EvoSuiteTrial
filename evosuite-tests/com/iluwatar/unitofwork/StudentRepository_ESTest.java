/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 13:57:56 GMT 2021
 */

package com.iluwatar.unitofwork;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.unitofwork.Student;
import com.iluwatar.unitofwork.StudentDatabase;
import com.iluwatar.unitofwork.StudentRepository;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StudentRepository_ESTest extends StudentRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StudentDatabase studentDatabase0 = new StudentDatabase();
      HashMap<String, List<Student>> hashMap0 = new HashMap<String, List<Student>>();
      StudentRepository studentRepository0 = new StudentRepository(hashMap0, studentDatabase0);
      Integer integer0 = new Integer(1768);
      Student student0 = new Student(integer0, "INSERT", "MODIFY");
      List<Student> list0 = List.of(student0);
      hashMap0.put("INSERT", list0);
      // Undeclared exception!
      try { 
        studentRepository0.registerNew(student0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StudentDatabase studentDatabase0 = new StudentDatabase();
      StudentRepository studentRepository0 = new StudentRepository((Map<String, List<Student>>) null, studentDatabase0);
      Integer integer0 = new Integer((-605));
      Student student0 = new Student(integer0, "", "Saving {} to database.");
      // Undeclared exception!
      try { 
        studentRepository0.registerNew(student0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.Map.get(Object)\" because \"this.context\" is null
         //
         verifyException("com.iluwatar.unitofwork.StudentRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StudentDatabase studentDatabase0 = new StudentDatabase();
      HashMap<String, List<Student>> hashMap0 = new HashMap<String, List<Student>>();
      Integer integer0 = new Integer(0);
      Student student0 = new Student(integer0, "MODIFY", "DELETE");
      List<Student> list0 = List.of(student0, student0);
      hashMap0.put("MODIFY", list0);
      StudentRepository studentRepository0 = new StudentRepository(hashMap0, studentDatabase0);
      // Undeclared exception!
      try { 
        studentRepository0.registerModified(student0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, List<Student>> hashMap0 = new HashMap<String, List<Student>>();
      StudentDatabase studentDatabase0 = new StudentDatabase();
      StudentRepository studentRepository0 = new StudentRepository(hashMap0, studentDatabase0);
      // Undeclared exception!
      try { 
        studentRepository0.registerModified((Student) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.unitofwork.Student.getName()\" because \"student\" is null
         //
         verifyException("com.iluwatar.unitofwork.StudentRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, List<Student>> hashMap0 = new HashMap<String, List<Student>>();
      StudentDatabase studentDatabase0 = new StudentDatabase();
      StudentRepository studentRepository0 = new StudentRepository(hashMap0, studentDatabase0);
      // Undeclared exception!
      try { 
        studentRepository0.registerDeleted((Student) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"com.iluwatar.unitofwork.Student.getName()\" because \"student\" is null
         //
         verifyException("com.iluwatar.unitofwork.StudentRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, List<Student>> hashMap0 = new HashMap<String, List<Student>>();
      hashMap0.put("INSERT", (List<Student>) null);
      StudentDatabase studentDatabase0 = new StudentDatabase();
      StudentRepository studentRepository0 = new StudentRepository(hashMap0, studentDatabase0);
      // Undeclared exception!
      try { 
        studentRepository0.commit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"java.util.List.iterator()\" because \"studentsToBeInserted\" is null
         //
         verifyException("com.iluwatar.unitofwork.StudentRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, List<Student>> hashMap0 = new HashMap<String, List<Student>>();
      StudentDatabase studentDatabase0 = new StudentDatabase();
      StudentRepository studentRepository0 = new StudentRepository(hashMap0, studentDatabase0);
      Integer integer0 = new Integer(0);
      Student student0 = new Student(integer0, "N a>,Ul D+To`f#", "&.h");
      studentRepository0.registerDeleted(student0);
      studentRepository0.commit();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, List<Student>> hashMap0 = new HashMap<String, List<Student>>();
      StudentDatabase studentDatabase0 = new StudentDatabase();
      StudentRepository studentRepository0 = new StudentRepository(hashMap0, studentDatabase0);
      Integer integer0 = new Integer(0);
      Student student0 = new Student(integer0, "N a>,Ul D+To`f#", "&.h");
      studentRepository0.registerModified(student0);
      studentRepository0.commit();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, List<Student>> hashMap0 = new HashMap<String, List<Student>>();
      StudentDatabase studentDatabase0 = new StudentDatabase();
      StudentRepository studentRepository0 = new StudentRepository(hashMap0, studentDatabase0);
      Integer integer0 = new Integer(0);
      Student student0 = new Student(integer0, "N a>,Ul D+To`f#", "&.h");
      studentRepository0.registerNew(student0);
      studentRepository0.commit();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, List<Student>> hashMap0 = new HashMap<String, List<Student>>();
      StudentDatabase studentDatabase0 = new StudentDatabase();
      StudentRepository studentRepository0 = new StudentRepository(hashMap0, studentDatabase0);
      studentRepository0.commit();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StudentDatabase studentDatabase0 = new StudentDatabase();
      StudentRepository studentRepository0 = new StudentRepository((Map<String, List<Student>>) null, studentDatabase0);
      studentRepository0.commit();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, List<Student>> hashMap0 = new HashMap<String, List<Student>>();
      List<Student> list0 = List.of();
      hashMap0.put("DELETE", list0);
      StudentDatabase studentDatabase0 = new StudentDatabase();
      Integer integer0 = new Integer((-1840700268));
      StudentRepository studentRepository0 = new StudentRepository(hashMap0, studentDatabase0);
      Student student0 = new Student(integer0, "DELETE", "INSERT");
      // Undeclared exception!
      try { 
        studentRepository0.registerDeleted(student0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }
}
