/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 23 01:24:23 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Entry_ESTest extends Entry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Directory directory0 = new Directory("#7GWUj7Yr");
      Iterator iterator0 = directory0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Directory directory0 = new Directory((String) null);
      int int0 = directory0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Directory directory0 = new Directory("]#}I%#3b");
      File file0 = new File("bs-EesF-nt@PyY Bq", 1);
      Entry entry0 = directory0.add(file0);
      int int0 = entry0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = new File((String) null, (-3030));
      int int0 = file0.getSize();
      assertEquals((-3030), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Directory directory0 = new Directory((String) null);
      String string0 = directory0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Directory directory0 = new Directory("]#}I%#3b");
      String string0 = directory0.getName();
      assertEquals("]#}I%#3b", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Directory directory0 = new Directory("");
      String string0 = directory0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Directory directory0 = new Directory("8VpE>tYp/Xy`j^x_L@J");
      Entry entry0 = directory0.add(directory0);
      assertEquals("8VpE>tYp/Xy`j^x_L@J", entry0.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Directory directory0 = new Directory("b=2WAA$CE'+b}!~HUb");
      Entry entry0 = directory0.add((Entry) null);
      // Undeclared exception!
      try { 
        entry0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"Entry.getSize()\" because \"<local3>\" is null
         //
         verifyException("Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Directory directory0 = new Directory("uvz^kuWxe&y8/");
      directory0.add((Entry) null);
      // Undeclared exception!
      try { 
        directory0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot invoke \"Entry.getSize()\" because \"<local3>\" is null
         //
         verifyException("Directory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Directory directory0 = new Directory((String) null);
      String string0 = directory0.toString();
      assertEquals("null (0)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = new File("'J`BJLGpS<[V<+R#J", (-142));
      try { 
        file0.iterator();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = new File("", 1478);
      try { 
        file0.add(file0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Entry", e);
      }
  }
}
